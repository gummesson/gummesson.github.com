<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, overall geekiness and other musings</description>
          <link>http://ellengummesson.com/</link>
            
              <item>
                <title>Make Netrw Behave More Like NERDTree</title>
                <description>&lt;p&gt;This is nice read for using something more native to &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt;. Quite early into my editor transition I found out that it had a native file explorer called &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/pi_netrw.html&quot; title=&quot;Netrw&quot;&gt;Netrw&lt;/a&gt;, but I didn&amp;rsquo;t particularly like it it&amp;rsquo;s default state so I started to use a plugin called &lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot; title=&quot;NERDTree&quot;&gt;NERDTree&lt;/a&gt; instead. It&amp;rsquo;s great but it&amp;rsquo;s nice that a more native solution can solve the problem too. I&amp;rsquo;ve also started using a fuzzy finder plugin, &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot; title=&quot;CtrlP&quot;&gt;CtrlP&lt;/a&gt;, more and more lately but I still like to have a &amp;ldquo;project visualizer&amp;rdquo; of some sort and I think that Netrw will fit that quite nicely. I also added these to my &lt;code&gt;.vimrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:netrw_liststyle = 3
let g:netrw_list_hide = &quot;.git,.sass-cache,.jpg,.png,.svg&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;liststyle&lt;/code&gt; option makes it lists all file and folders in a more tree-like structure vill the &lt;code&gt;hide&lt;/code&gt; options just hides the selected filetypes and folders.&lt;/p&gt;
</description>
                <published>February  4, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/04/make-netrw-behave-more-like-nerdtree</link>
              </item>
            
              <item>
                <title>Wordcount Plugin For Jekyll</title>
                <description>&lt;p&gt;Today I decided to hack together a small plugin for Jekyll that can count all the words in a blog post and also roughly calculate how many seconds it takes to read it. This is based on some quick googling where I found out that the average person reads 300 words per minute, so I&amp;rsquo;m not sure if it&amp;rsquo;s 100% true but it&amp;rsquo;s a pretty fun feature nonetheless. I&amp;rsquo;ve of course created a repository for it on &lt;a href=&quot;https://github.com/gummesson/jekyll-wordcount&quot; title=&quot;Jekyll Wordcount on GitHub&quot;&gt;GitHub&lt;/a&gt;. I&amp;rsquo;m not entirely sure that the implementation I use is the best since it needs to read the content and strip it of it&amp;rsquo;s HTML tags before actually doing the counting but it was by far the easiest way&lt;sup id=&quot;fnref:20130131-1&quot;&gt;&lt;a href=&quot;#fn:20130131-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. The couting seems to be quite accurate too, which is nice.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130131-1&quot;&gt;
      &lt;p&gt;Atleast if you&amp;rsquo;re measuring by code length since the whole plugin currently consists of just 17 lines of code.&lt;a href=&quot;#fnref:20130131-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>January 31, 2013</published>
                <link>http://ellengummesson.com/blog/2013/01/31/wordcount-plugin-for-jekyll</link>
              </item>
            
              <item>
                <title>Markdown Preview For Vim</title>
                <description>&lt;p&gt;One of the biggest advantages of using a dedicated tool for writing &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;Markdown&quot;&gt;Markdown&lt;/a&gt; is that they often come with some way of previewing your text file. I kind of miss that kind of function when I&amp;rsquo;m using &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; I decided to throw together a simple vimscript that uses &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot; title=&quot;Pandoc&quot;&gt;Pandoc&lt;/a&gt; to convert a Markdown file to HTML. The basic gist of it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! PandocMarkdownPreview()
  silent exec 'cd %:p:h'
  silent exec 'pwd'
  silent exec '!pandoc -o preview.html %'
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It sets the directory of the current open file as the root and then calls Pandoc to do the conversion. It&amp;rsquo;s not that terribly complicated but it gets the job done well. I also expanded upon it a bit and added another part that&amp;rsquo;ll open the &lt;code&gt;preview.html&lt;/code&gt; directly in the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if has(&quot;win32&quot;)
  silent exec '!start cmd /c preview.html'
else
  silent exec '!xdg-open preview.html'
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that&amp;rsquo;s worth being mentioned is that the &lt;code&gt;!xdg-open&lt;/code&gt; part can be changed to &lt;code&gt;!open&lt;/code&gt; and then you can also use it if you&amp;rsquo;re on a Mac.&lt;/p&gt;

&lt;p&gt;In the end the whole thing looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! PandocMarkdownPreview()
  silent exec 'cd %:p:h'
  silent exec 'pwd'
  silent exec '!pandoc -o preview.html %'
  if has(&quot;win32&quot;)
    silent exec '!start cmd /c preview.html'
  else
    silent exec '!xdg-open preview.html'
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the mapping looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map &amp;lt;leader&amp;gt;pmd :call PandocMarkdownPreview()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also threw together more refined version of the whole thing in a &lt;a href=&quot;https://gist.github.com/4649514&quot; title=&quot;Pandoc Markdown Preview on GitHub&quot;&gt;gist on Github&lt;/a&gt;. You&amp;rsquo;ll obviously need to have Pandoc install on your machine in order to get it up and running.&lt;/p&gt;
</description>
                <published>January 27, 2013</published>
                <link>http://ellengummesson.com/blog/2013/01/27/markdown-preview-for-vim</link>
              </item>
            
              <item>
                <title>Vim: Nearly Four Weeks In</title>
                <description>&lt;p&gt;My little &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; adventure continues and a couple of days ago I uninstalled &lt;a href=&quot;http://www.sublimetext.com/&quot; title=&quot;Sublime Text 2&quot;&gt;Sublime Text 2&lt;/a&gt;. I have nothing against it and I still think it&amp;rsquo;s a fantastic editor but I feel like I don&amp;rsquo;t really need it anymore. I&amp;rsquo;m no way near being a expert but like I&amp;rsquo;ve stated before I really like using Vim and I don&amp;rsquo;t see that that changing anytime soon. I&amp;rsquo;ve also configured my Vim files &lt;a href=&quot;https://github.com/gummesson/vimfiles&quot; title=&quot;My Vim files on GitHub&quot;&gt;quite a bit&lt;/a&gt;&lt;sup id=&quot;fnref:20130124-1&quot;&gt;&lt;a href=&quot;#fn:20130124-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but I&amp;rsquo;ve tried to stay away from adding too many plugins since I don&amp;rsquo;t want to rely on too many of them. Right now I use eight which I think is a reasonable number. I also finally re-did my git repository so that every plugin is a git submodule&lt;sup id=&quot;fnref:20130123-2&quot;&gt;&lt;a href=&quot;#fn:20130123-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; which makes updating them much, much easier. I have to say that the customization possibilities in Vim are extraordinary. Who knew that that would be the case for an editor that&amp;rsquo;s just slightly younger than me?&lt;/p&gt;

&lt;h2 id=&quot;a-few-tips-and-tricks&quot;&gt;A Few Tips And Tricks&lt;/h2&gt;

&lt;p&gt;I won&amp;rsquo;t go through my whole &lt;code&gt;vimrc&lt;/code&gt; file since it&amp;rsquo;s currently about 225 lines long &lt;em&gt;(and heavily commented)&lt;/em&gt; but I want to share a few handy settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the language to english:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if has(&quot;unix&quot;)
  language messages C
else
  language messages en
endif  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t know if I&amp;rsquo;m strange but I tend to stick with using english as my default language in nearly every app I install. I find it to be much easier googling for help. Since I both use Linux and Windows I had to add the &lt;code&gt;if...else...endif&lt;/code&gt; part so that it plays nice with both of them&lt;sup id=&quot;fnref:20130124-3&quot;&gt;&lt;a href=&quot;#fn:20130124-3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. It&amp;rsquo;s important to note that this needs to be at the very top of your &lt;code&gt;vimrc&lt;/code&gt; file if you want it to work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the cursorline as a mode indicator:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au InsertEnter * set nocursorline
au InsertLeave * set cursorline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wanted an easier way to quickly see which mode I was in without relying on some third party plugin. I of course have the &lt;code&gt;showmode&lt;/code&gt; setting enabled but by removing the cursorline from insert mode I don&amp;rsquo;t even have to move my eyes one bit. I don&amp;rsquo;t really need to see which line I&amp;rsquo;m on anyway when I&amp;rsquo;m actually typing something.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autoresize all windows:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au VimResized * :wincmd =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resizing your windows in Vim can be a bit of a pain, especially if you want to go from using a fullscreen to something smaller or the other way around. The above setting makes it a lot less of a hassle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ignore certain files:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set wildignore+=.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was one of the features that I like the most about Sublime Text 2 and I&amp;rsquo;m glad that I can use it in Vim too. If I can&amp;rsquo;t edit a certain filetype I don&amp;rsquo;t want to see it.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130124-1&quot;&gt;
      &lt;p&gt;One of the most useful tweaks I&amp;rsquo;ve found for writing blog posts was from Peter Provost&amp;rsquo;s &lt;a href=&quot;http://peterprovost.org/blog/2012/04/22/editing-octopress-slash-jekyll-posts-in-vim/&quot; title=&quot;Editing Octopress/Jekyll Posts in Vim&quot;&gt;Editing Octopress/Jekyll Posts in Vim&lt;/a&gt;. The YAML front matter doesn&amp;rsquo;t look like crap anymore, yay!&lt;a href=&quot;#fnref:20130124-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130123-2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Submodules&quot; title=&quot;Git submodules&quot;&gt;A repository inside another repository&lt;/a&gt;.&lt;a href=&quot;#fnref:20130123-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130124-3&quot;&gt;
      &lt;p&gt;This works for everything by the way. I think that the default name for Mac is &lt;code&gt;macunix&lt;/code&gt;, but I&amp;rsquo;m not 100% sure. &lt;a href=&quot;#fnref:20130124-3&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>January 24, 2013</published>
                <link>http://ellengummesson.com/blog/2013/01/24/vim-nearly-four-weeks-in</link>
              </item>
            
              <item>
                <title>Serve: The Ugliest Static Site Generator In The World</title>
                <description>&lt;p&gt;I don&amp;rsquo;t know what&amp;rsquo;s been up with me lately but I do know that during the last couple of weeks I&amp;rsquo;ve &amp;ldquo;shipped&amp;rdquo; a lot of things. I mean, most of them are basic things but I&amp;rsquo;ve had fun while doing them. So yesterday I added yet another repo to &lt;a href=&quot;https://github.com/gummesson&quot; title=&quot;My GitHub account&quot;&gt;my GitHub account&lt;/a&gt;, &lt;a href=&quot;https://github.com/gummesson/serve&quot; title=&quot;Serve&quot;&gt;Serve&lt;/a&gt;. &lt;em&gt;Serve&lt;/em&gt; is a static site generator which focuses on generating small sites that only need to consist of a few pages at the most.&lt;/p&gt;

&lt;h2 id=&quot;the-process&quot;&gt;The Process&lt;/h2&gt;

&lt;p&gt;It started with an faint idea. I wanted to build something useful that could parse a couple of &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;Markdown&quot;&gt;Markdown&lt;/a&gt; files and convert them to static HTML files. It&amp;rsquo;s no secret that I absolutely adore &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt;, but I tend to roll with an idea once I get it. I first threw together a one file script that had the same basic functionality and went from there. My goal was to really learn how to use modules and classes since I&amp;rsquo;ve mostly shied away from them&lt;sup id=&quot;fnref:20130120-1&quot;&gt;&lt;a href=&quot;#fn:20130120-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I looked at a lot of different projects on &lt;a href=&quot;https://github.com&quot; title=&quot;GitHub&quot;&gt;GitHub&lt;/a&gt; but to be honest I couldn&amp;rsquo;t really comprehend everything, since I&amp;rsquo;m still pretty inexperienced when it comes to &lt;a href=&quot;http://www.ruby-lang.org/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt; and programming languages in general. I didn&amp;rsquo;t just want to give up though. I was going to finish my newly started projects goddamnit, even if it would take me months. &lt;/p&gt;

&lt;p&gt;It suddenly clicked for me and I &lt;em&gt;finally&lt;/em&gt; got &amp;ldquo;it&amp;rdquo;&lt;sup id=&quot;fnref:20130120-2&quot;&gt;&lt;a href=&quot;#fn:20130120-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, which is such an amazing feeling. It didn&amp;rsquo;t take too long for me to transform the ugly script into it&amp;rsquo;s current state. I&amp;rsquo;m not saying it&amp;rsquo;s perfect but it looks a hell of a lot nicer then it did when I started and it sort of keeps me excited to continue to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Learning stuff is awesome, especially when you notice your own progress.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130120-1&quot;&gt;
      &lt;p&gt;I&amp;rsquo;ve of course read about them and have an basic understanding of their purpose but actually seeing them in action and implementing them is so much better for my learning experience.&lt;a href=&quot;#fnref:20130120-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130120-2&quot;&gt;
      &lt;p&gt;With &amp;ldquo;it&amp;rdquo; I mean how to use them to get them to work with the rest of the code. &amp;ldquo;Inheritance!&amp;rdquo; was literally the thing that popped up in my head that made me understand everything. It&amp;rsquo;s funny how the brain works sometimes.&lt;a href=&quot;#fnref:20130120-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>January 20, 2013</published>
                <link>http://ellengummesson.com/blog/2013/01/20/serve-the-ugliest-static-site-generator-in-the-world</link>
              </item>
            
    </channel>
  </rss>