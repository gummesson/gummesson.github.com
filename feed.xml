<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, musings and geekiness</description>
          <link>http://ellengummesson.com/</link>
            
              <item>
                <title>Installing dwm on Crunchbang Linux</title>
                <description>&lt;p&gt;&lt;em&gt;Note: I started to write this guide a couple of days ago, before I yet again went distrohopping. I now run a minimal Debian Testing setup on my netbook but I thought it would be a good idea to post it nonetheless.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After trying both &lt;a href=&quot;http://crunchbang.org/&quot;&gt;Crunchbang Linux&lt;/a&gt;, &lt;a href=&quot;http://manjaro.org/&quot;&gt;Manjaro Linux&lt;/a&gt;, a couple of days of &lt;a href=&quot;http://peppermintos.com/&quot;&gt;Peppermint OS&lt;/a&gt; and a week long stint with &lt;a href=&quot;http://www.lubuntu.net/&quot;&gt;Lubuntu&lt;/a&gt; I went back to using Crunchbang. It was my first Linux distribution and I still think it’s fits my needs perfectly. I really like that it’s lightweight while still being a fully functional operating system.&lt;/p&gt;

&lt;p&gt;While I was running Lubuntu I played around with &lt;a href=&quot;http://dwm.suckless.org/&quot;&gt;dwm&lt;/a&gt; and fell in love with it, so when I decided to reinstall Crunchbang I really wanted to use it too. The process wasn’t as straight forward as it was on Lubuntu, but after a few tries and with the help of &lt;a href=&quot;http://cortman.wordpress.com/2012/10/23/crunchbang-slim-and-wm-madness/&quot;&gt;this blog post&lt;/a&gt; I managed to get it to run flawlessly. I thought that I would be an good idea to write it all down, so with no further ado, here’s a short guide on how to install and configure &lt;code&gt;dwm&lt;/code&gt; to run on Crunchbang Linux.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First you need to install &lt;code&gt;dwm&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install dwm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fully customize it you need to configure it and install it from source, but since I’m happy with the way it looks I’ll just use the standard package for now. &lt;a href=&quot;http://tools.suckless.org/dmenu/&quot;&gt;dmenu&lt;/a&gt; is a great tool to have too, but the package &lt;code&gt;suckless-tools&lt;/code&gt; is actually installed by default which means that you don’t have to install it yourself.&lt;/p&gt;

&lt;p&gt;These packages are by no means neccessary, but they’re quite handy to have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install unclutter
sudo apt-get install feh
sudo apt-get install acpi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;unclutter&lt;/code&gt; will hide your mouse cursor, &lt;code&gt;feh&lt;/code&gt; will help you set the wallpaper and &lt;code&gt;acpi&lt;/code&gt; will display your battery’s status directly on the &lt;code&gt;dwm&lt;/code&gt; status bar. You can leave out &lt;code&gt;acpi&lt;/code&gt; if you’re not using a laptop.&lt;/p&gt;

&lt;h2 id=&quot;dwm&quot;&gt;dwm&lt;/h2&gt;

&lt;h3 id=&quot;the-wallpaper&quot;&gt;The wallpaper&lt;/h3&gt;

&lt;p&gt;Open up the terminal and type the following (use one of the four layout alternatives):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;feh --bg-[tile|center|scale|seamless] path/to/file.ext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a small file called &lt;code&gt;.fehbg&lt;/code&gt; in your home directory.&lt;/p&gt;

&lt;h3 id=&quot;the-startup-script&quot;&gt;The startup script&lt;/h3&gt;

&lt;p&gt;Create a file called &lt;code&gt;dwm-startup&lt;/code&gt; somewhere in your PATH with the following content (and don’t forget to make it executable&lt;sup id=&quot;fnref:20130810-1&quot;&gt;&lt;a href=&quot;#fn:20130810-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

# Set `feh` to change the wallpaper
source $HOME/.fehbg

# Set `unclutter` to hide the cursor after a second of inactivity
unclutter -root -idle 1 &amp;amp;

# Start `dwm` with a modified status bar
while true; do
  xsetroot -name &quot;Db: $(dropbox status) | B: $(acpi -b | awk '{ print $4 $5 }' | sed 's/,/ \/ /g') | V: $(amixer get Master | awk '/Front Left:/{ print $5 }' | sed 's/\[\|\]//g') | $(date '+%d %b %Y') | $(date '+%H:%M')&quot;
  sleep 10s
done &amp;amp; exec dwm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The status bar will display an output that’ll roughly look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Db: Idle | B: 50% / 01:30:00 | V: 50% | 01 jan 2000 | 12:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that’s worth noting is that the official &lt;a href=&quot;https://www.dropbox.com/install?os=lnx#linux-install-content&quot;&gt;Dropbox CLI script&lt;/a&gt; is &lt;em&gt;NOT&lt;/em&gt; installed on Crunchbang by default, so you have to set it up by yourself.&lt;/p&gt;

&lt;h2 id=&quot;x&quot;&gt;X&lt;/h2&gt;

&lt;p&gt;Create a file in your home directory called &lt;code&gt;.xinitrc&lt;/code&gt; and add the following content (make it executable too):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash

# Load .Xresources
xrdb -merge $HOME/.Xresources

# Set the default window manager
DEFAULT=openbox-session

# Start `Openbox`/`dwm`
case $1 in
  openbox-session)
    exec openbox-session
  ;;
  dwm)
    exec dwm-startup
  ;;
  *)
    exec $DEFAULT
  ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load your &lt;code&gt;.Xresources&lt;/code&gt; file, which contains a couple of vital settings for &lt;a href=&quot;http://www.x.org/&quot;&gt;X&lt;/a&gt;, and the window manager of your choice. It’ll fallback on using Openbox as the default.&lt;/p&gt;

&lt;h2 id=&quot;slim&quot;&gt;SLiM&lt;/h2&gt;

&lt;p&gt;Now it’s time to configure &lt;a href=&quot;http://slim.berlios.de/&quot;&gt;SLiM&lt;/a&gt; (the default login manager) by editing the &lt;code&gt;slim.conf&lt;/code&gt; file that’s located in &lt;code&gt;/etc&lt;/code&gt;. Uncomment the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;login_cmd           exec /bin/sh - ~/.xinitrc %session
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And comment out this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;login_cmd           exec /bin/bash -login /etc/X11/Xsession %session
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This needs to be configured since &lt;code&gt;dwm&lt;/code&gt; doesn’t use a autostart file by itself. The next thing you’ll have to do is to add &lt;code&gt;dwm&lt;/code&gt; to the part that says &lt;code&gt;sessions&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sessions            openbox-session,dwm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-grand-finale&quot;&gt;The grand finale&lt;/h2&gt;

&lt;p&gt;Now it’s time for you to reboot and press &lt;code&gt;F1&lt;/code&gt; when the login screen appears to choose which window manager to use. Make sure that you’re using &lt;code&gt;dwm&lt;/code&gt;, log in and you’re done!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130810-1&quot;&gt;
      &lt;p&gt;To make a file executable, open up the terminal and type &lt;code&gt;chmod +x file.ext&lt;/code&gt;.&lt;a href=&quot;#fnref:20130810-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>August 10, 2013</published>
                <link>http://ellengummesson.com/blog/2013/08/10/installing-dwm-on-crunchbang-linux</link>
              </item>
            
              <item>
                <title>A poor man's Notational Velocity/ResophNotes Vim alternative</title>
                <description>&lt;p&gt;&lt;em&gt;Long time, no see. I haven’t touched this blog in almost two months and the reason for that is that life got in the way. I’ve really missed writing so I’ll defintively try to pick it up again, I swear!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Linux is in a lot of ways much better than Windows but for some reason there’s no good alternative for note-taking apps like &lt;a href=&quot;http://notational.net/&quot;&gt;Notational Velocity&lt;/a&gt; or &lt;a href=&quot;http://www.resoph.com/ResophNotes/Welcome.html&quot;&gt;ResophNotes&lt;/a&gt;. I’ve tried &lt;a href=&quot;https://github.com/cpbotha/nvpy&quot;&gt;NvPY&lt;/a&gt; but unfortunately it doesn’t really work that great for using plain text files with Dropbox. A couple of months back I did experiment with using Vim in conjunction with the &lt;a href=&quot;https://github.com/mileszs/ack.vim&quot;&gt;Ack plugin&lt;/a&gt;, which worked fine on Linux but rather poorly on Windows&lt;sup id=&quot;fnref:20130729-1&quot;&gt;&lt;a href=&quot;#fn:20130729-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I decided to replace Ack with Vim’s built-in &lt;code&gt;grep&lt;/code&gt; function, mainly just to keep it a cross-platform script. It’s not quite as fast as Ack but the difference isn’t huge since it’s just dealing with text files.&lt;/p&gt;

&lt;p&gt;It basically consists of two command line mappings: &lt;code&gt;Note&lt;/code&gt;, which will create a new in the specified notes folder with the provided filename and the default extension, like this: &lt;code&gt;:Note This is the filename&lt;/code&gt;. &lt;code&gt;Notes&lt;/code&gt; has two functions. You can either use it to browse the notes folder or search the content of the text files in it, ie: &lt;code&gt;:Notes I'm looking for this&lt;/code&gt;. It’ll open up the quickfix list after the search is complete.&lt;/p&gt;

&lt;p&gt;I actually have a folder in my Vim home directory called &lt;code&gt;tweaks&lt;/code&gt; were I’ve placed a few small changes but you could technically turn this into a real plugin too or rewrite it and put it in your &lt;code&gt;.vimrc&lt;/code&gt; file. I like having most of its’ functionality in a &lt;code&gt;autoload&lt;/code&gt; folder since it won’t load until you actually need it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tweaks/autoload/notes.vim:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! notes#List(pattern)
  if strlen(a:pattern) == 0
    silent! execute 'Sexplore '.g:notes_directory
  else
    silent! execute 'lcd '.g:notes_directory.' | vimgrep /'.a:pattern.'/gj *.'.g:notes_extension.' | copen'
  endif
endfunction

function! notes#New(filename)
  if strlen(a:filename) == 0
    echom &quot;No filename!&quot;
  else
    silent! execute 'enew | lcd '.g:notes_directory.' | w '.a:filename.'.'.g:notes_extension
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s really nothing fancy in the above scripts, but the combination of using &lt;code&gt;netrw&lt;/code&gt;, &lt;code&gt;vimgrep&lt;/code&gt; and the quickfix list works really well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tweaks/plugin/notes.vim&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if exists(&quot;g:loaded_notes_plugin&quot;) || &amp;amp;cp
  finish
endif

let g:loaded_notes_plugin = 1

if !exists(&quot;g:notes_directory&quot;)
  if has(&quot;unix&quot;)
    let g:notes_directory = &quot;~/Notes&quot;
  else
    let g:notes_directory = &quot;C:/Notes&quot;
  endif
endif

if !exists(&quot;g:notes_extension&quot;)
  let g:notes_extension = &quot;txt&quot;
endif

command! -nargs=? Notes call notes#List(&amp;lt;q-args&amp;gt;)
command! -nargs=? Note call notes#New(&amp;lt;q-args&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can of course change the &lt;code&gt;g:notes_directory&lt;/code&gt; and &lt;code&gt;g:notes_extension&lt;/code&gt; to whatever you want. You could remove the &lt;code&gt;if has(&quot;unix&quot;)&lt;/code&gt; part if you don’t plan on using it on different systems too.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130729-1&quot;&gt;
      &lt;p&gt;The plugin in itself works flawlessly but Ack doesn’t really work all to well on Windows.&lt;a href=&quot;#fnref:20130729-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>July 29, 2013</published>
                <link>http://ellengummesson.com/blog/2013/07/29/a-poor-mans-notational-velocity-resophnotes-vim-alternative</link>
              </item>
            
              <item>
                <title>SUIT base</title>
                <description>&lt;p&gt;This is such a simple but nice-to-have thing. I really like using &lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;normalize.css&lt;/a&gt; instead of having to completely wiping the styling of every element and I’ve to used my own mini reset with it to remove some of the default values like margins and paddings. I guess that I don’t have to do that anymore!&lt;/p&gt;
</description>
                <published>June  2, 2013</published>
                <link>http://ellengummesson.com/blog/2013/06/02/suit-base</link>
              </item>
            
              <item>
                <title>Helper.js</title>
                <description>&lt;p&gt;Earlier today I pushed a new project to Github called &lt;a href=&quot;https://github.com/gummesson/helper.js&quot;&gt;Helper.js&lt;/a&gt;. It basically a minimal&lt;sup id=&quot;fnref:20130526-1&quot;&gt;&lt;a href=&quot;#fn:20130526-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; JavaScript library for basic DOM manipulation tasks, which supports Internet Explorer 8 and above. It obviously ain’t as versatile as &lt;a href=&quot;http://www.jquery.com/&quot;&gt;jQuery&lt;/a&gt;, but it gets the job done for simpler stuff. I’ve tried it out in some older browsers but it’s probably likely that it has some bugs and sharp edges. As always I mostly wrote it just for fun and to learn the ins and outs of working with the DOM and structuring objects and the like in JavaScript. After 380 lines of code I feel much more confident but still very much like a novice.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130526-1&quot;&gt;
      &lt;p&gt;It currently weighs in at less than 700 bytes when compressed and gzipped.&lt;a href=&quot;#fnref:20130526-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>May 26, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/26/helper-js</link>
              </item>
            
              <item>
                <title>A handy function for going to the root directory of a project in Vim</title>
                <description>&lt;p&gt;Here’s a handy function I came up with after being tired of using &lt;code&gt;:cd ../&lt;/code&gt; like a madman when I was deep down at the bottom of a project’s folder structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! GoToRootDir()
  if isdirectory(&quot;.git&quot;)|| filereadable(&quot;Rakefile&quot;) || filereadable(&quot;Gruntfile.js&quot;)
    pwd
  else
    silent! exec 'cd ../'
    call GoToRootDir()
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s a not-so-fancy way of basically telling Vim to keep going up in the directory structure until it finds either a &lt;code&gt;.git&lt;/code&gt; folder or a specific file. When it finds the root it’ll also print out the path, which I added so that you can actually see that you’re in the root of the project. You can of course change &lt;code&gt;.git&lt;/code&gt;, &lt;code&gt;Rakefile&lt;/code&gt; and &lt;code&gt;Gruntfile.js&lt;/code&gt; to something completely different, as long as it’s a file that you commonly have in your projects. I also added a more convenient mapping for it in my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command! -nargs=0 Root call GoToRootDir()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This step may not be necessary, but by mapping something like &lt;code&gt;:call GoToRootDir&lt;/code&gt; to just &lt;code&gt;:Root&lt;/code&gt; means that you have to type fewer keystrokes.&lt;/p&gt;
</description>
                <published>May 20, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/20/a-handy-function-for-going-to-the-root-directory-of-a-project-in-vim</link>
              </item>
            
    </channel>
  </rss>
