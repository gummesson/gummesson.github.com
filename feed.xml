<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, overall geekiness and other musings</description>
          <link>http://ellengummesson.com/</link>
            
              <item>
                <title>Easy Session For Vim</title>
                <description>&lt;p&gt;Another week, another project and this time it&amp;rsquo;s actually something half decent. After a few hours of work over the last couple of days I&amp;rsquo;m finally done with my first plugin for &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; and I named it &lt;a href=&quot;https://github.com/gummesson/easy-session.vim&quot; title=&quot;Easy Session on GitHub&quot;&gt;Easy Session&lt;/a&gt;. It lets you easily manage sessions with four commands: &lt;code&gt;:SaveSession&lt;/code&gt;, &lt;code&gt;:NewSession&lt;/code&gt;, &lt;code&gt;:OpenSession&lt;/code&gt; and &lt;code&gt;:ListSessions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:SaveSession&lt;/code&gt; uses the current working directory as the default filename, so you have to make sure that you&amp;rsquo;re in the project&amp;rsquo;s root directory if you&amp;rsquo;re saving your session for the first time. It may not be the most ultimate solution, but it&amp;rsquo;s better than the default filename &lt;code&gt;Session.vim&lt;/code&gt;. There&amp;rsquo;s also &lt;code&gt;:NewSession&lt;/code&gt; which lets you use your own custom filename. The &lt;code&gt;:OpenSession&lt;/code&gt;, suprisingly, opens a session.&lt;/p&gt;

&lt;p&gt;An earlier version of it had an &lt;code&gt;:Sessions&lt;/code&gt; command, but it used &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1075&quot; title=&quot;Netrw&quot;&gt;Netrw&lt;/a&gt; and was a bit too clunky so I rewrote it as &lt;code&gt;:ListSessions&lt;/code&gt;, which is quite a fun hack. It launches a new window with a temporary buffer that gets deleted as soon as it&amp;rsquo;s closed. It gets the list by reading the content of the sessions directory with &lt;code&gt;:0read !ls&lt;/code&gt; or &lt;code&gt;:0read !dir /B&lt;/code&gt;&lt;sup id=&quot;fnref:20130212-1&quot;&gt;&lt;a href=&quot;#fn:20130212-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. The code looks really sketchy, but the result looks quite nice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2013-02-12-easy-session-01.png&quot; alt=&quot;Easy Session (Sessions List)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2013-02-12-easy-session-02.png&quot; alt=&quot;Easy Session (Sessions List)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if it&amp;rsquo;s useful for anyone but me, but it was a fun challenge. There&amp;rsquo;s a &lt;a href=&quot;http://peterodding.com/code/vim/session/&quot; title=&quot;Session.vim&quot;&gt;Session.vim&lt;/a&gt; plugin that has a lof more advanced features than mine do, but I think I&amp;rsquo;ll stick with my own solution for now.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130212-1&quot;&gt;
      &lt;p&gt;The &amp;ldquo;&lt;code&gt;0&lt;/code&gt;&amp;rdquo; makes the list start on the first line in the buffer. If just &lt;code&gt;:read&lt;/code&gt; is used it&amp;rsquo;ll paste the content below the first line.&lt;a href=&quot;#fnref:20130212-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>February 12, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/12/easy-session-for-vim</link>
              </item>
            
              <item>
                <title>Fetch</title>
                <description>&lt;p&gt;I&amp;rsquo;ve released yet another one of my &lt;em&gt;Mostly Uselessâ„¢&lt;/em&gt; projects, &lt;a href=&quot;https://github.com/gummesson/fetch&quot; title=&quot;Fetch&quot;&gt;Fetch&lt;/a&gt;, which let&amp;rsquo;s you grab a couple of web development resources straight from the command line. Package managers seem to be something that pops up every once in a while. Among them there&amp;rsquo;s &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot; title=&quot;homebrew&quot;&gt;homebrew&lt;/a&gt;, &lt;a href=&quot;http://twitter.github.com/bower/&quot; title=&quot;Bower&quot;&gt;Bower&lt;/a&gt;, &lt;a href=&quot;http://yeoman.io/&quot; title=&quot;Yeoman&quot;&gt;Yeoman&lt;/a&gt; and of course the good old &lt;a href=&quot;http://en.wikipedia.org/wiki/Advanced_Packaging_Tool&quot; title=&quot;APT&quot;&gt;apt-get&lt;/a&gt;, which I use from time to time. They&amp;rsquo;re lovely tools but as I&amp;rsquo;m nothing more than a hobbyist they&amp;rsquo;re a bit overkill for me, so I took a run at creating something a lot more simpler. I wouldn&amp;rsquo;t really call it a package manager but more of a component catcher though. I&amp;rsquo;m thinking of implementing &lt;a href=&quot;http://www.json.org/&quot; title=&quot;JSON&quot;&gt;JSON&lt;/a&gt; into it instead of using &lt;a href=&quot;http://www.yaml.org/&quot; title=&quot;YAML&quot;&gt;YAML&lt;/a&gt;, but we&amp;rsquo;ll see how that goes. One thing I really need to do is to step up my game and actually start to learn more. I feel that I&amp;rsquo;ve been staying in the same spot knowledge-wise for quite some time now and it&amp;rsquo;s time to start to progress again. But I digress.&lt;/p&gt;

&lt;p&gt;One a side note, I finally figured out why I couldn&amp;rsquo;t get my &lt;a href=&quot;http://www.ruby-lang.org/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt; projects to run under &lt;a href=&quot;http://crunchbang.org/&quot; title=&quot;Crunchbang Linux&quot;&gt;Crunchbang Linux&lt;/a&gt;. I&amp;rsquo;d literally forgotten the &amp;ldquo;whole shebang&amp;rdquo;, ie: &lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt;, at the start. &lt;strong&gt;Head, prepare to meet desk&lt;/strong&gt;.&lt;/p&gt;
</description>
                <published>February  8, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/08/fetch</link>
              </item>
            
              <item>
                <title>Make Netrw Behave More Like NERDTree</title>
                <description>&lt;p&gt;This is nice read for using something more native to &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt;. Quite early into my editor transition I found out that it had a native file explorer called &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/pi_netrw.html&quot; title=&quot;Netrw&quot;&gt;Netrw&lt;/a&gt;, but I didn&amp;rsquo;t particularly like it it&amp;rsquo;s default state so I started to use a plugin called &lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot; title=&quot;NERDTree&quot;&gt;NERDTree&lt;/a&gt; instead. It&amp;rsquo;s great but it&amp;rsquo;s nice that a more native solution can solve the problem too. I&amp;rsquo;ve also started using a fuzzy finder plugin, &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot; title=&quot;CtrlP&quot;&gt;CtrlP&lt;/a&gt;, more and more lately but I still like to have a &amp;ldquo;project visualizer&amp;rdquo; of some sort and I think that Netrw will fit that quite nicely. I also added these to my &lt;code&gt;.vimrc&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:netrw_liststyle = 3
let g:netrw_list_hide = &quot;.git,.sass-cache,.jpg,.png,.svg&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;liststyle&lt;/code&gt; option makes it lists all file and folders in a more tree-like structure vill the &lt;code&gt;hide&lt;/code&gt; options just hides the selected filetypes and folders.&lt;/p&gt;
</description>
                <published>February  4, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/04/make-netrw-behave-more-like-nerdtree</link>
              </item>
            
              <item>
                <title>Wordcount Plugin For Jekyll</title>
                <description>&lt;p&gt;Today I decided to hack together a small plugin for Jekyll that can count all the words in a blog post and also roughly calculate how many seconds it takes to read it. This is based on some quick googling where I found out that the average person reads 300 words per minute, so I&amp;rsquo;m not sure if it&amp;rsquo;s 100% true but it&amp;rsquo;s a pretty fun feature nonetheless. I&amp;rsquo;ve of course created a repository for it on &lt;a href=&quot;https://github.com/gummesson/jekyll-wordcount&quot; title=&quot;Jekyll Wordcount on GitHub&quot;&gt;GitHub&lt;/a&gt;. I&amp;rsquo;m not entirely sure that the implementation I use is the best since it needs to read the content and strip it of it&amp;rsquo;s HTML tags before actually doing the counting but it was by far the easiest way&lt;sup id=&quot;fnref:20130131-1&quot;&gt;&lt;a href=&quot;#fn:20130131-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. The couting seems to be quite accurate too, which is nice.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130131-1&quot;&gt;
      &lt;p&gt;Atleast if you&amp;rsquo;re measuring by code length since the whole plugin currently consists of just 17 lines of code.&lt;a href=&quot;#fnref:20130131-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>January 31, 2013</published>
                <link>http://ellengummesson.com/blog/2013/01/31/wordcount-plugin-for-jekyll</link>
              </item>
            
              <item>
                <title>Markdown Preview For Vim</title>
                <description>&lt;p&gt;One of the biggest advantages of using a dedicated tool for writing &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;Markdown&quot;&gt;Markdown&lt;/a&gt; is that they often come with some way of previewing your text file. I kind of miss that kind of function when I&amp;rsquo;m using &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; I decided to throw together a simple vimscript that uses &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot; title=&quot;Pandoc&quot;&gt;Pandoc&lt;/a&gt; to convert a Markdown file to HTML. The basic gist of it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! PandocMarkdownPreview()
  silent exec 'cd %:p:h'
  silent exec 'pwd'
  silent exec '!pandoc -o preview.html %'
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It sets the directory of the current open file as the root and then calls Pandoc to do the conversion. It&amp;rsquo;s not that terribly complicated but it gets the job done well. I also expanded upon it a bit and added another part that&amp;rsquo;ll open the &lt;code&gt;preview.html&lt;/code&gt; directly in the browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if has(&quot;win32&quot;)
  silent exec '!start cmd /c preview.html'
else
  silent exec '!xdg-open preview.html'
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that&amp;rsquo;s worth being mentioned is that the &lt;code&gt;!xdg-open&lt;/code&gt; part can be changed to &lt;code&gt;!open&lt;/code&gt; and then you can also use it if you&amp;rsquo;re on a Mac.&lt;/p&gt;

&lt;p&gt;In the end the whole thing looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! PandocMarkdownPreview()
  silent exec 'cd %:p:h'
  silent exec 'pwd'
  silent exec '!pandoc -o preview.html %'
  if has(&quot;win32&quot;)
    silent exec '!start cmd /c preview.html'
  else
    silent exec '!xdg-open preview.html'
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the mapping looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map &amp;lt;leader&amp;gt;pmd :call PandocMarkdownPreview()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also threw together more refined version of the whole thing in a &lt;a href=&quot;https://gist.github.com/4649514&quot; title=&quot;Pandoc Markdown Preview on GitHub&quot;&gt;gist on Github&lt;/a&gt;. You&amp;rsquo;ll obviously need to have Pandoc install on your machine in order to get it up and running.&lt;/p&gt;
</description>
                <published>January 27, 2013</published>
                <link>http://ellengummesson.com/blog/2013/01/27/markdown-preview-for-vim</link>
              </item>
            
    </channel>
  </rss>