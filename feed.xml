<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, musings and geekiness</description>
          <link>http://ellengummesson.com</link>
            
              <item>
                <title>Find-String</title>
                <description>&lt;p&gt;A cool little &lt;code&gt;ack&lt;/code&gt;-like &lt;a href=&quot;http://technet.microsoft.com/en-us/library/cc731851(v=WS.10).aspx&quot;&gt;PowerShell&lt;/a&gt; module. It works flawlessly!&lt;/p&gt;
</description>
                <published>September  7, 2013</published>
                <link>http://ellengummesson.com/blog/2013/09/07/find-string</link>
              </item>
            
              <item>
                <title>Fixing Jekyll's encoding shenaningans (again)</title>
                <description>&lt;p&gt;After a lot of of hesitation I finally upgraded &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to &lt;code&gt;1.1.2&lt;/code&gt; from using the &lt;code&gt;0.12.1&lt;/code&gt; version. Quite a lot has changed and the team is doing a great job with it. However,  my old &lt;a href=&quot;/blog/2013/03/03/fixing-jekylls-encoding-shenanings/&quot;&gt;&lt;code&gt;SET LANG&lt;/code&gt; hack&lt;/a&gt; didn’t work. I tried using &lt;a href=&quot;http://joseoncode.com/2011/11/27/solving-utf-problem-with-jekyll-on-windows/&quot;&gt;another hack&lt;/a&gt; which involves using &lt;code&gt;chcp 65001&lt;/code&gt; instead  but that didn’t quite work either. Whenever I tried to launch the default server &lt;a href=&quot;http://ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick.html&quot;&gt;WEBrick&lt;/a&gt; it blew up. There were errors, errors everywhere. I wasn’t going to give up so I came up with another solution.&lt;/p&gt;

&lt;p&gt;I now use an external server while Jekyll just auto-generates the site. I use a small &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; web server app called &lt;a href=&quot;#&quot;&gt;nws&lt;/a&gt; which I use all the time anyway. I also use &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; for task automation (&lt;a href=&quot;https://github.com/gummesson/ellengummesson/blob/master/Gruntfile.js&quot;&gt;here’s the source code&lt;/a&gt;). I also have a project called “&lt;a href=&quot;https://github.com/gummesson/teeny-tiny-static-server&quot;&gt;Teeny tiny static server&lt;/a&gt;” which I created some months ago. It uses &lt;a href=&quot;https://github.com/chneukirchen/rack&quot;&gt;Rack&lt;/a&gt;, &lt;a href=&quot;https://github.com/jtrupiano/rack-rewrite&quot;&gt;Rack-Rewrite&lt;/a&gt; and &lt;a href=&quot;https://github.com/macournoyer/thin&quot;&gt;Thin&lt;/a&gt; to create a fast prototype web server, which may be an alternative to using a Node.js based solution. It’s not perfect but it’s better than being stuck on an old version.&lt;/p&gt;
</description>
                <published>September  5, 2013</published>
                <link>http://ellengummesson.com/blog/2013/09/05/fixing-jekylls-encoding-shenaningans-again</link>
              </item>
            
              <item>
                <title>Another day, another redesign</title>
                <description>&lt;p&gt;The time has come for me to yet again change the design of this website. This time I went nearly all in on using &lt;a href=&quot;http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/&quot;&gt;BEM&lt;/a&gt; as my CSS coding style of choice and utilizing &lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;normalize.css&lt;/a&gt; as the base for the overall element styling and vertical rhythm. I also use &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; for all of my automation, including building and generating the actual site&lt;sup id=&quot;fnref:20130903-1&quot;&gt;&lt;a href=&quot;#fn:20130903-1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I’ve replaced the jQuery code with pure JavaScript too&lt;sup id=&quot;fnref:20130903-2&quot;&gt;&lt;a href=&quot;#fn:20130903-2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and I threw together a nifty mobile navigation solution which I think works quite well.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130903-1&quot;&gt;
      &lt;p&gt;This not entirely by pure choice, since Jekyll hates my computer’s default encoding and thus is giving me all sorts of errors, but it works really well.&lt;a href=&quot;#fnref:20130903-1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130903-2&quot;&gt;
      &lt;p&gt;I actually did that a week or two ago but I never really got around to writing about it.&lt;a href=&quot;#fnref:20130903-2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>September  3, 2013</published>
                <link>http://ellengummesson.com/blog/2013/09/03/another-day-another-redesign</link>
              </item>
            
              <item>
                <title>Creating a Chocolatey package</title>
                <description>&lt;p&gt;I recently “converted” all of my installed apps over to using Chocolatey. I won’t dwelve too deeply into how much I love it, but let’s just say it’s a lot. It’s such a relief not having to hunt for executable files. There were packages for nearly all of the apps I use but some were missing so I added a few of them. The process is pretty straightforward.&lt;/p&gt;

&lt;p&gt;Let’s say we have an app that’s called &lt;code&gt;MyAwesomeApp&lt;/code&gt;. First we need to create a directory called &lt;code&gt;myawesomeapp&lt;/code&gt; and then create a &lt;code&gt;nuspec&lt;/code&gt; file in it with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;package xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;id&amp;gt;myawesomeapp&amp;lt;/id&amp;gt;
    &amp;lt;title&amp;gt;MyAwesomeApp&amp;lt;/title&amp;gt;
    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
    &amp;lt;authors&amp;gt;The creator's name&amp;lt;/authors&amp;gt;
    &amp;lt;owners&amp;gt;Your name&amp;lt;/owners&amp;gt;
    &amp;lt;summary&amp;gt;An awesome app&amp;lt;/summary&amp;gt;
    &amp;lt;description&amp;gt;An incredible awesome app that'll one day save the world!&amp;lt;/description&amp;gt;
    &amp;lt;projectUrl&amp;gt;http://example.com/&amp;lt;/projectUrl&amp;gt;
    &amp;lt;tags&amp;gt;awesome awesome awesome&amp;lt;/tags&amp;gt;
    &amp;lt;licenseUrl&amp;gt;http://example.com/license.html&amp;lt;/licenseUrl&amp;gt;
    &amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt;
    &amp;lt;iconUrl&amp;gt;http://example.com/logo.png&amp;lt;/iconUrl&amp;gt;
    &amp;lt;releaseNotes&amp;gt;http://example.com/news/&amp;lt;/releaseNotes&amp;gt;
  &amp;lt;/metadata&amp;gt;
  &amp;lt;files&amp;gt;
    &amp;lt;file src=&quot;tools\*&quot; target=&quot;tools&quot; /&amp;gt;
  &amp;lt;/files&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then it’s time to create a &lt;code&gt;chocolateyInstall.ps1&lt;/code&gt; file and save it in another directory inside the &lt;code&gt;myawesomeapp&lt;/code&gt; directory called &lt;code&gt;tools&lt;/code&gt;. Now, we could technically do it as simple as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Install-ChocolateyPackage &quot;MyAwesomeApp&quot; &quot;exe&quot; &quot;/quiet&quot; &quot;http://example.com/download/installer.exe&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I like adding a bit more functionality so instead we’ll use this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$Package = &quot;MyAwesomeApp&quot;
$PackageParams = @{
  packageName = $Package;  
  fileType = &quot;exe&quot;;
  silentArgs = &quot;/quiet&quot;;
  url = &quot;http://example.com/download/installer.exe&quot;;
} 

Try {
  Install-ChocolateyPackage @PackageParams
  Write-ChocolateySuccess $Package
} Catch {
  Write-ChocolateyFailure $Package &quot;$($_.Exception.Message)&quot;
  Throw
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feels a bit nicer and it’s a hell of a lot easier to re-use, atleast for me. After this we need to run &lt;code&gt;cpack&lt;/code&gt; in the root directory to create a &lt;code&gt;nupkg&lt;/code&gt; file and then &lt;code&gt;cinst myawesomeapp -source %cd%&lt;/code&gt; to test it. The last thing we need to do is to upload the generated &lt;code&gt;nupkg&lt;/code&gt; file on the official &lt;a href=&quot;http://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; website. You could do this straight from the PowerShell, but I haven’t done that yet.&lt;/p&gt;
</description>
                <published>September  1, 2013</published>
                <link>http://ellengummesson.com/blog/2013/09/01/creating-a-chocolatey-package</link>
              </item>
            
              <item>
                <title>lightline.vim – a light and configurable statusline for Vim</title>
                <description>&lt;p&gt;A nice and lightweight alternative to &lt;a href=&quot;https://github.com/Lokaltog/powerline&quot;&gt;Powerline&lt;/a&gt;. I’ve always wanted to try it but from what I’ve read it’s quite tricky to get Powerline work on Windows. Lightline works like a charm though!&lt;/p&gt;
</description>
                <published>August 29, 2013</published>
                <link>http://ellengummesson.com/blog/2013/08/29/lightline-vim</link>
              </item>
            
    </channel>
  </rss>
