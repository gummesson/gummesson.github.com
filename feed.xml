<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, musings and geekiness</description>
          <link>http://ellengummesson.com/</link>
            
              <item>
                <title>Helper.js</title>
                <description>&lt;p&gt;Earlier today I pushed a new project to Github called &lt;a href=&quot;https://github.com/gummesson/helper.js&quot;&gt;Helper.js&lt;/a&gt;. It basically a minimal&lt;sup id=&quot;fnref:20130526-1&quot;&gt;&lt;a href=&quot;#fn:20130526-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; JavaScript library for basic DOM manipulation tasks, which supports Internet Explorer 8 and above. It obviously ain’t as versatile as &lt;a href=&quot;http://www.jquery.com/&quot;&gt;jQuery&lt;/a&gt;, but it gets the job done for simpler stuff. I’ve tried it out in some older browsers but it’s probably likely that it has some bugs and sharp edges. As always I mostly wrote it just for fun and to learn the ins and outs of working with the DOM and structuring objects and the like in JavaScript. After 380 lines of code I feel much more confident but still very much like a novice.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130526-1&quot;&gt;
      &lt;p&gt;It currently weighs in at less than 700 bytes when compressed and gzipped.&lt;a href=&quot;#fnref:20130526-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>May 26, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/26/helper-js</link>
              </item>
            
              <item>
                <title>A handy function for going to the root directory of a project in Vim</title>
                <description>&lt;p&gt;Here’s a handy function I came up with after being tired of using &lt;code&gt;:cd ../&lt;/code&gt; like a madman when I was deep down at the bottom of a project’s folder structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! GoToRootDir()
  if isdirectory(&quot;.git&quot;)|| filereadable(&quot;Rakefile&quot;) || filereadable(&quot;Gruntfile.js&quot;)
    pwd
  else
    silent! exec 'cd ../'
    call GoToRootDir()
  endif
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s a not-so-fancy way of basically telling Vim to keep going up in the directory structure until it finds either a &lt;code&gt;.git&lt;/code&gt; folder or a specific file. When it finds the root it’ll also print out the path, which I added so that you can actually see that you’re in the root of the project. You can of course change &lt;code&gt;.git&lt;/code&gt;, &lt;code&gt;Rakefile&lt;/code&gt; and &lt;code&gt;Gruntfile.js&lt;/code&gt; to something completely different, as long as it’s a file that you commonly have in your projects. I also added a more convenient mapping for it in my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command! -nargs=0 Root call GoToRootDir()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This step may not be necessary, but by mapping something like &lt;code&gt;:call GoToRootDir&lt;/code&gt; to just &lt;code&gt;:Root&lt;/code&gt; means that you have to type fewer keystrokes.&lt;/p&gt;
</description>
                <published>May 20, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/20/a-handy-function-for-going-to-the-root-directory-of-a-project-in-vim</link>
              </item>
            
              <item>
                <title>CSS Architecture</title>
                <description>&lt;p&gt;A nice and lengthy article about how to write modular and maintainable CSS. I especially like the naming conventions, mostly because they’re similar to my own. I’m vain like that.&lt;/p&gt;
</description>
                <published>May 14, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/14/css-architecture</link>
              </item>
            
              <item>
                <title>stereokai.vim</title>
                <description>&lt;p&gt;Lately I’ve really started to enjoy &lt;a href=&quot;http://www.monokai.nl/blog/2006/07/15/textmate-color-theme/&quot;&gt;the Monokai theme&lt;/a&gt;. There’s a couple of different versions out there for &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; and my favorite is &lt;a href=&quot;https://github.com/jaromero/vim-monokai-refined&quot;&gt;Monokai-Refined&lt;/a&gt;. However, Vim’s way of handling highlighting can sometimes be quite weird so I decided to add some minor tweaks so that it looks especially good when your writing HTML, CSS and JavaScript and make it available in a repository. I don’t know if it’ll replace my beloved &lt;a href=&quot;https://github.com/chriskempson/tomorrow-theme&quot;&gt;Tomorrow Theme&lt;/a&gt; or &lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;Solarized&lt;/a&gt;, but it’s definitively a close third atleast.&lt;/p&gt;
</description>
                <published>May  9, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/09/stereokai-vim</link>
              </item>
            
              <item>
                <title>Responsive Inspector</title>
                <description>&lt;p&gt;A pretty nice &lt;a href=&quot;https://chrome.google.com/webstore/detail/responsive-inspector-beta/memcdolmmnmnleeiodllgpibdjlkbpim&quot;&gt;Chrome extension&lt;/a&gt; for viewing the different defined media queries of a website. I sort of feel like a really nerd when I use it but the curiosity takes the best of me.&lt;/p&gt;
</description>
                <published>May  6, 2013</published>
                <link>http://ellengummesson.com/blog/2013/05/06/responsive-inspector</link>
              </item>
            
    </channel>
  </rss>
