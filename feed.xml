<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, overall geekiness and other musings</description>
          <link>http://ellengummesson.com/</link>
            
              <item>
                <title>Re-releasing Smallwork</title>
                <description>&lt;p&gt;Back in January I wrote a small paragraph about my SCSS “framework” &lt;a href=&quot;https://github.com/gummesson/smallwork&quot; title=&quot;Smallwork&quot;&gt;Smallwork&lt;/a&gt;. When I released it I was really happy about it, but I soon realized that I’d been perhaps a bit too trigger happy with it. This weekend I decided on a whim to nuke it and start over and yesterday I re-released it. It’s pratically re-written from the ground up and it’s even smaller in size than it was before. I cleaned up the code like a maid and threw out quite a bit of extra “baggage” that I was probably never going to use anyway. Now I feel like it actually could be useful to someone else too, which is really nice.&lt;/p&gt;

&lt;p&gt;I also created yet another &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; plugin, this time just a simple wrapper for &lt;a href=&quot;http://compass-style.org/&quot; title=&quot;Compass&quot;&gt;Compass&lt;/a&gt;, which &lt;em&gt;Smallwork&lt;/em&gt; is built with. I was getting sick of having to type either &lt;code&gt;:!compass compile&lt;/code&gt; or &lt;code&gt;:sh&lt;/code&gt; and then &lt;code&gt;compass compile&lt;/code&gt; so I threw together a really basic function that makes it much easier. Now I only have to type &lt;code&gt;:CompassCompile&lt;/code&gt;. Another nice feature is that you don’t actually have to close the command prompt&lt;sup id=&quot;fnref:20130305-1&quot;&gt;&lt;a href=&quot;#fn:20130305-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; which means that you can use &lt;code&gt;:CompassWatch&lt;/code&gt; without it interfering with Vim&lt;sup id=&quot;fnref:20130305-2&quot;&gt;&lt;a href=&quot;#fn:20130305-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. If all goes well I think I’ll even publish it on the official Vim scripts website too.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130305-1&quot;&gt;
      &lt;p&gt;Normally you can’t do anything until you’ve exited the command prompt and hit &lt;code&gt;Enter&lt;/code&gt;, but a simple solution from the &lt;a href=&quot;http://vim.wikia.com/wiki/Execute_external_programs_asynchronously_under_Windows&quot; title=&quot;Execute external programs asynchronously under Windows&quot;&gt;Vim Wiki&lt;/a&gt; fixed that.&lt;a href=&quot;#fnref:20130305-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130305-2&quot;&gt;
      &lt;p&gt;Atleast on Windows. I don’t think that there’s an easy way to do that on Unix, which is unfortunate.&lt;a href=&quot;#fnref:20130305-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>March  5, 2013</published>
                <link>http://ellengummesson.com/blog/2013/03/05/re-releasing-smallwork</link>
              </item>
            
              <item>
                <title>Fixing Jekyll's Encoding Shenanings</title>
                <description>&lt;p&gt;After installing the 0.12.1 version of &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt; I started to get an annoying error that the encoding was wrong. I’m really picky about saving all my files as &lt;code&gt;UTF-8&lt;/code&gt;, so I couldn’t for the life of me figuring out why it all of a sudden threw that kind of error. I even reinstalled 0.12.0 and sure enough, that version worked without a problem. The solution is to set the default language and encoding before running Jekyll, ie. &lt;code&gt;set LANG=en_EN.UTF-8&lt;/code&gt; for Windows or &lt;code&gt;export LANG=en_EN.UTF-8&lt;/code&gt;&lt;sup id=&quot;fnref:20130303-1&quot;&gt;&lt;a href=&quot;#fn:20130303-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; for Unix. Since I’m a lazy person I of course implemented it in my &lt;code&gt;Rakefile&lt;/code&gt;, similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'rbconfig'

LANG = en_EN.UTF-8

if RbConfig::CONFIG[&quot;host_os&quot;] =~ /mswin|mingw/
  SET = &quot;set&quot;
else
  SET = &quot;export&quot;
end

task :build do
  system &quot;#{SET} LANG=#{LANG} &amp;amp;&amp;amp; jekyll&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RbConfig&lt;/code&gt; part is actually a neat trick I found a couple of weeks ago. It apparently works better than using &lt;code&gt;RUBY_PLATFORM&lt;/code&gt; since it picks up the actual OS rather than the Ruby platform.&lt;sup id=&quot;fnref:20130303-2&quot;&gt;&lt;a href=&quot;#fn:20130303-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; I’m not sure that the &lt;code&gt;require&lt;/code&gt; part is really necessary but it doesn’t hurt either. You can of course just create an alias too if you’re only using Unix, ie: &lt;code&gt;alias jekyll=&quot;export LANG=en_EN.UTF-8 &amp;amp;&amp;amp; jekyll&quot;&lt;/code&gt; or something like that.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130303-1&quot;&gt;
      &lt;p&gt;I actually set my language to &lt;code&gt;sv_SV.UTF-8&lt;/code&gt;, but I figured that using the english version in an example is better.&lt;a href=&quot;#fnref:20130303-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130303-2&quot;&gt;
      &lt;p&gt;Using &lt;code&gt;RUBY_PLATFORM&lt;/code&gt; when you’re working with other Ruby implementations such as JRuby doesn’t quite work, if I understand it correctly.&lt;a href=&quot;#fnref:20130303-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>March  3, 2013</published>
                <link>http://ellengummesson.com/blog/2013/03/03/fixing-jekylls-encoding-shenanings</link>
              </item>
            
              <item>
                <title>WEBrick And Cygwin</title>
                <description>&lt;p&gt;There’s no secret that I’ve become a big fan of &lt;a href=&quot;http://www.cygwin.com/&quot; title=&quot;Cygwin&quot;&gt;Cygwin&lt;/a&gt; and the Unix command line since I started to use it more frequently. However, there’s really no easy way of running &lt;a href=&quot;http://www.ruby-lang.org/en/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt;, or more specifically &lt;a href=&quot;http://rubygems.org/&quot; title=&quot;RubyGems&quot;&gt;RubyGems&lt;/a&gt; under it unless you’ve installed it directly throught the Cygwin installer which I, unfortunately, haven’t done. I did find the alias solution which I wrote about in the previous post that makes it somewhat less of a hassle. Using it in conjunction with &lt;a href=&quot;http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick.html&quot; title=&quot;Webbrick&quot;&gt;WEBrick&lt;/a&gt;&lt;sup id=&quot;fnref:20130228-1&quot;&gt;&lt;a href=&quot;#fn:20130228-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a pain though, since it for some reason won’t kill the server and thus rendering the port useless until the computer gets rebooted. After much, much digging I did found an answer to how to shut it down “properly”: &lt;code&gt;taskkill /F /PID {num}&lt;/code&gt;&lt;sup id=&quot;fnref:20130228-2&quot;&gt;&lt;a href=&quot;#fn:20130228-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. The &lt;code&gt;{num}&lt;/code&gt; is of course replaced with the real PID number that Webbrick outputs when it starts. It’s kind of brutal and annoying, but I think it’s good to have a backup plan in case I do want to execute Jekyll from Cygwin. I did give it an alias too, just to be sure.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130228-1&quot;&gt;
      &lt;p&gt;Which is the default server for &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;http://www.sinatrarb.com/&quot; title=&quot;Sinatra&quot;&gt;Sinatra&lt;/a&gt;.&lt;a href=&quot;#fnref:20130228-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130228-2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14244288/how-do-i-kill-a-rails-webrick-server?rq=1&quot; title=&quot;How do I killa a Rails Webbrick server?&quot;&gt;The answer was found on StackOverflow&lt;/a&gt;, as expected.&lt;a href=&quot;#fnref:20130228-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>February 28, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/28/webrick-and-cygwin</link>
              </item>
            
              <item>
                <title>Ack On Windows</title>
                <description>&lt;p&gt;I recently finally tried out &lt;a href=&quot;http://betterthangrep.com/&quot; title=&quot;Ack&quot;&gt;Ack&lt;/a&gt; which I must say is a pretty awesome tool. The installation was fairly straight forward but I though that I would write it down here in case I’ll ever need to do it again or if someone wants a small guide with just a few easy steps.&lt;/p&gt;

&lt;p&gt;First things first, &lt;a href=&quot;http://www.perl.org/&quot; title=&quot;Perl&quot;&gt;Perl&lt;/a&gt; needs to be install on the system. If you have either &lt;a href=&quot;http://git-scm.com/&quot; title=&quot;Git&quot;&gt;Git&lt;/a&gt; or &lt;a href=&quot;http://rubyinstaller.org/add-ons/devkit/&quot; title=&quot;DevKit&quot;&gt;DevKit&lt;/a&gt; installed then you’re good to go.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the standalone script from the &lt;a href=&quot;http://betterthangrep.com/install/&quot; title=&quot;How to install ack&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Create a &lt;code&gt;bat&lt;/code&gt; file and add the following to it: &lt;code&gt;@&quot;C:\path\to\perl.exe&quot; C:\path\to\ack.pl %*&lt;/code&gt;. Change the paths so that they point to the relevant places.&lt;/li&gt;
  &lt;li&gt;Save the file as &lt;code&gt;ack.bat&lt;/code&gt; and place it somewhere in your system environment path, or create a new folder and add it to said path.&lt;sup id=&quot;fnref:20130221-1&quot;&gt;&lt;a href=&quot;#fn:20130221-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Last, but not least, create an alias for the &lt;code&gt;bat&lt;/code&gt; file in your &lt;code&gt;.bash_profile&lt;/code&gt; if you want to get it to work with &lt;a href=&quot;http://www.cygwin.com/&quot; title=&quot;Cygwin&quot;&gt;Cygwin&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use the same steps to create a more “sophisticated” way of running any kind of script too. Let’s say you have a script called &lt;code&gt;foo.rb&lt;/code&gt;. You want to run it straight from the command line but you don’t necessary want to turn into a full fledged gem. Just change the the first path in the &lt;code&gt;bat&lt;/code&gt; file so it points to your binary &lt;a href=&quot;http://www.ruby-lang.org/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt; file and the second to your actually script and you’re all good!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130221-1&quot;&gt;
      &lt;p&gt;Which can be modified under “System Properties” → “Advanced system settings” → “Advanced” → “Environment Variables” → “Path”.&lt;a href=&quot;#fnref:20130221-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>February 21, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/21/ack-on-windows</link>
              </item>
            
              <item>
                <title>More Vim Goodness</title>
                <description>&lt;p&gt;I feel like I start to sound like a fantatic when it comes to &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt;, but the truth is that I’m having so much fun with it that it’s hard to stop and thus I’ve created two more plugins: &lt;a href=&quot;https://github.com/gummesson/voutliner.vim&quot; title=&quot;voutliner.vim&quot;&gt;Voutliner&lt;/a&gt; and &lt;a href=&quot;https://github.com/gummesson/footnotes.vim&quot; title=&quot;footnotes.vim&quot;&gt;Footnotes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;voutliner&quot;&gt;Voutliner&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Voutliner&lt;/em&gt; is a simple outlining tool&lt;sup id=&quot;fnref:20130216-1&quot;&gt;&lt;a href=&quot;#fn:20130216-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I looked at both &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=3515&quot; title=&quot;VimOutliner&quot;&gt;VimOutliner&lt;/a&gt; and &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=517&quot; title=&quot;The Vim Outliner&quot;&gt;TVO&lt;/a&gt; but I felt that they were a bit too “heavy” for me. I wanted something simple that didn’t depend on too many different components. &lt;em&gt;Voutliner&lt;/em&gt; is certainly not for everyone but it works perfectly for me. It basically built around a couple of regexes based on indentation that’s been linked with the default syntax highlighting. I did try it out on a couple of different colorschemes and it seems to work on most of them, which is good.&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;I like using footnotes but I hate having to manually enter the date for each and every one of them&lt;sup id=&quot;fnref:20130216-2&quot;&gt;&lt;a href=&quot;#fn:20130216-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. At first I used a simple abbreviation to try to tackle the problem but I still had to move around too much for my liking. Now I just need to press &lt;code&gt;F7&lt;/code&gt; and the date will get added to every footnote automatically. Like &lt;em&gt;Voutliner&lt;/em&gt; I doubt that many people will use it, but yet again it’s extremely useful for me.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130216-1&quot;&gt;
      &lt;p&gt;And it’s a really bad name.&lt;a href=&quot;#fnref:20130216-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130216-2&quot;&gt;
      &lt;p&gt;I use &lt;code&gt;YYYYMMDD-#&lt;/code&gt; as a format so that every footnote has an unique set of numbers, which makes it even more tedious.&lt;a href=&quot;#fnref:20130216-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>February 16, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/16/more-vim-goodness</link>
              </item>
            
    </channel>
  </rss>