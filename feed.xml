<?xml version="1.0" encoding="UTF-8"?>
    <rss version="2.0">
        <channel>
            <title>Ellen Gummesson</title>
            <description>Random ramblings, overall geekiness and other musings</description>
            <link>http://ellengummesson.com</link>
            
                <item>
                    <title>Trying Out SASS</title>
                    <description>&lt;p&gt;Disclaimer: the following blog post is extremely geeky and contains A LOT of code.&lt;/p&gt;

&lt;p&gt;Earlier today I decided to try out &lt;a href=&quot;http:/www.sass-lang.com/&quot; title=&quot;Syntactically Awesome Stylesheets&quot;&gt;Sass&lt;/a&gt; and &lt;a href=&quot;http://compass-style.org/&quot; title=&quot;Compass - an open-source CSS Authoring Framework&quot;&gt;Compass&lt;/a&gt; because I've seen it being mentioned almost daily for quite a while. I didn't really know what I wanted to code, so I just did some kind of starting point with a couple of font selectors, properties and values using mainly the variable function in Sass, which i a really handy tool I think. You have to excuse me for the lack of highlighting in the code blocks and I hope that it's still readable. I've tried a few plugins that enables automatic highlighting, but I haven't come across one that I really love. I also had remove nearly all of my comments in the code but I'm sure it's still understandable. If not, you can check it out on my &lt;a href=&quot;https://github.com/gummesson/sass-type-variables&quot; title=&quot;Sass Type Variables&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;_variables.scss&lt;/h2&gt;

&lt;p&gt;Like I said earlier, the variable part in Sass is really awesome. I created a separate file called &lt;code&gt;variables.scss&lt;/code&gt; (Sass' default file extension) where I defined them all for better control and easier editing. Adding an underscore before a file name stops your file from get rendered into a &lt;code&gt;.css&lt;/code&gt; file, which is useful since you probably don't want all of your &lt;code&gt;.scss&lt;/code&gt; files to become regular &lt;code&gt;.css&lt;/code&gt; files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Default / Body
    $default-font-family: Helvetica, Arial, Sans-serif;
   $default-font-percent: 100%;
$default-font-lineheight: 1.5;
     $default-font-color: #333;
      $default-font-size: 1em;

// Headings
$heading-font-family: Georgia, Times, Serif;
$heading-font-weight: bold;

// Links
     $default-link-color: $default-font-color;
$default-link-decoration: 1px solid;

// Hover
     $default-hover-color: #666;
$default-hover-decoration: 1px solid; 

// Margins
$default-margin: 1.5em;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I focused on just a few selectors (body, headings and links), but this could be expanded to include a lot more.&lt;/p&gt;

&lt;h2&gt;screen.scss&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;screen.scss&lt;/code&gt; is where the magic happens, so to speak. That's where I imported all of my variables that I defined in &lt;code&gt;variables.scss&lt;/code&gt; and placed them in selectors with properties.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import &quot;_variables.scss&quot;;

/* Body */

body {
    font : #{$default-font-percentage}/#{$default-font-lineheight} $default-font-family;
    color: $default-font-color;
}

/* Headings */

h1, h2, h3, h4, h5, h6 {
    font-family: $heading-font-family;
    font-weight: $heading-font-weight;
}

h1 {
    font-size: $default-font-size * 2;
}

h2 {
      font-size: $default-font-size * 1.5;
    line-height: $default-font-lineheight - 0.2;
}

h3 {
      font-size: $default-font-size * 1.25;
    line-height: $default-font-lineheight - 0.2;
}

h4 {
      font-size: $default-font-size * 1.125;
    line-height: $default-font-lineheight - 0.2;
}

h5, h6 {
    font-size: $default-font-size;
}

/* Paragraphs */

p {
    margin-bottom: $default-margin;
}

/* Links */

a {
            color: $default-link-color;
    border-bottom: $default-link-decoration $default-link-color;
}

a:hover, a:focus {
            color: $default-hover-color;
    border-bottom: $default-hover-decoration $default-hover-color;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it's really cool that you can use basic math with variables so that you can create other values by only using one variable as a base point. Just change it and all the calculations will be rendered automatically.&lt;/p&gt;

&lt;h2&gt;screen.css&lt;/h2&gt;

&lt;p&gt;This is the final result after Compass was done with the compiling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Body */
body {
  font: 100%/1.5 Helvetica, Arial, Sans-serif;
  color: #333333;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    font-family: Georgia, Times, Serif;
    font-weight: bold;
}

h1 {
    font-size: 2em;
}

h2 {
      font-size: 1.5em;
    line-height: 1.3;
}

h3 {
      font-size: 1.25em;
    line-height: 1.3;
}

h4 {
      font-size: 1.125em;
    line-height: 1.3;
}

h5, h6 {
    font-size: 1em;
}

/* Paragraphs */
p {
    margin-bottom: 1.5em;
}

/* Links */
a {
            color: #333333;
    border-bottom: 1px solid #333333;
}

a:hover, a:focus {
            color: #666666;
    border-bottom: 1px solid #666666;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It might look like a lot of work for simplifying such a small part, but the thing is that both &lt;code&gt;variables.scss&lt;/code&gt; and &lt;code&gt;screen.scss&lt;/code&gt; are highly customizable and reusable too. If I wanted to change a font-family or make the font-percentage bigger I could do that by just opening up &lt;code&gt;variables.scss&lt;/code&gt; and re-rendering it. I don't have to change anything else. I think I'll try out Sass for a while and see how it goes. There's a lot more to it than just simple variables and math, so I'm looking forward to see what I can come up with.&lt;/p&gt;
</description>
                    <published>August 25, 2012</published>
                    <link>http://ellengummesson.com/blog/2012/08/25/trying-out-sass</link>
                </item>
            
                <item>
                    <title>My Big Fat Git Failure</title>
                    <description>&lt;p&gt;Note: this isn't critism, rather a documentation of my own stupidity.&lt;/p&gt;

&lt;p&gt;It all started a couple of hours ago. I needed to change something fast on this blog so instead of using my normal method (ie: using Jekyll to generate all the files and then push them to GitHub) I decided to use GitHub's built-in editor since that's a much faster way. Big mistake. After a while, when I decided to commit another change using the actual desktop client I got an error message which said &quot;DETACHED HEAD&quot;. After some googling around I found a pretty simple &lt;a href=&quot;http://stackoverflow.com/questions/1705731/how-do-i-fix-checking-out-head-in-git,&quot; title=&quot;Stack Overflow - How do I fix checking out HEAD^ in git&quot;&gt;solution&lt;/a&gt; that thankfully solved this.&lt;/p&gt;

&lt;p&gt;However, after I'd fixed that and remade all of my changes locally using my normal method, I got another error message when I was trying to commit the changes: &quot;Failed to sync this branch&quot;.&lt;/p&gt;

&lt;p&gt;&lt;img src='/assets/images/2012-08-23-failed-to-sync.png' title='Failed to sync this branch' alt='Failed to sync this branch'&gt;&lt;/p&gt;

&lt;p&gt;I again did a google search but this time around I didn't come across something that could entirely fix the problem. I did found a &lt;a href=&quot;http://haacked.com/archive/2012/05/21/introducing-github-for-windows.aspx#87327&quot; title=&quot;git push in the shell&quot;&gt;temporary fix&lt;/a&gt; though which involves using the shell, so I'm still able to update the site. I don't know if I screwed something up or if it's a bug. I'm hoping that the problem will solve itself, even though it's highly unlikely.&lt;/p&gt;

&lt;p&gt;Damn me and my apparent laziness.&lt;/p&gt;
</description>
                    <published>August 23, 2012</published>
                    <link>http://ellengummesson.com/blog/2012/08/23/my-big-fat-git-failure</link>
                </item>
            
                <item>
                    <title>The Hassles of Media Queries</title>
                    <description>&lt;p&gt;When I first set out to create this site, I knew that I wanted to make it responsive by adding a couple of media queries in my CSS. I never knew that it could become quite a tricky feat though. I tried and I tried, but for some reason I couldn't get them to properly work. Then it hit me that I'd forgot to add this in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note to self: don't be stupid. It'll save you a lot of time.&lt;/p&gt;

&lt;p&gt;I also had some problems with my iPhone's Retina display, but after some digging I found a &quot;hack&quot; that made it work properly so that the media queries look the same as on a regular browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(-webkit-min-device-pixel-ratio: 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To my defense I'm still pretty new to all of this, but still... I feel really dumb. Now they finally works and I'm totally happy, but I don't know whether or not I should be scared of the fact that I don't own an iPad... Either way, the site should now atleast look okay on an iPhone. I hope. I did try it out on an old HTC Wildfire too, and it looked suprisingly good. That was a nice suprise.&lt;/p&gt;
</description>
                    <published>August 22, 2012</published>
                    <link>http://ellengummesson.com/blog/2012/08/22/the-hassles-of-media-queries</link>
                </item>
            
                <item>
                    <title>Windows 7, Ruby, DevKit and Jekyll</title>
                    <description>&lt;p&gt;To tell you the truth, I wasn't that familiar with the whole Ruby thing when I decided to start using &lt;a href=&quot;http://www.jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt;. I practically had to learn it by trial, error and finally success since I couldn't really find a good guide on how to do it. I thought that it would be good to write it all down and share it (mostly for my own sake).&lt;/p&gt;

&lt;h2&gt;Installing Ruby&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;a href=&quot;http://rubyinstaller.org/&quot; title=&quot;Ruby Installer for Windows&quot;&gt;RubyInstaller&lt;/a&gt; and download the latest version.&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Note:&lt;/h3&gt;

&lt;p&gt;it's really important that you install it in a directory without a space in it's path as stated in the installer, eg: &lt;code&gt;C:\ProgrammingLanguages\Ruby&lt;/code&gt; and NOT &lt;code&gt;C:\Program Files\Ruby&lt;/code&gt;, for example. Trust me.&lt;/p&gt;

&lt;h2&gt;Installing DevKit&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run the DevKit Installer and extract it to your desired directory.&lt;/li&gt;
&lt;li&gt;Open up the command line and type &lt;code&gt;cd&lt;/code&gt; + the path to the directory were you installed DevKit, eg: &lt;code&gt;cd C:\ProgrammingLanguages\DevKit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;ruby dk.rb init&lt;/code&gt; to intialize the setup.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;ruby dk.rb review&lt;/code&gt; to check if DevKit has found your Ruby directory.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;ruby dk.rb install&lt;/code&gt; to install it.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Note:&lt;/h3&gt;

&lt;p&gt;I usually just search for &quot;cmd&quot; in the start menu search bar to open the command line.&lt;/p&gt;

&lt;h2&gt;Installing Jekyll&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;gem install jekyll&lt;/code&gt; in the command line.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Running Jekyll&lt;/h2&gt;

&lt;p&gt;After you're done with creating your site with template and liquid tags (hit the &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot; title=&quot;Jekyll wiki&quot;&gt;wiki&lt;/a&gt; to check them out), do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open up the command line and type &lt;code&gt;cd&lt;/code&gt; + the path to the directory were you've saved your site, eg: &lt;code&gt;cd C:\User\MySite&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;jekyll --server&lt;/code&gt; in the cmd.&lt;/li&gt;
&lt;li&gt;Type out &lt;code&gt;localhost:4000&lt;/code&gt; in your browser to see your site.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Note:&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;jekyll --auto --server&lt;/code&gt; instead of &lt;code&gt;jekyll --server&lt;/code&gt; if you want Jekyll to generate and update your site continuosly while you write and save a new post, change the layout etc.&lt;/p&gt;
</description>
                    <published>August 21, 2012</published>
                    <link>http://ellengummesson.com/blog/2012/08/21/win-7-ruby-devkit-and-jekyll</link>
                </item>
            
                <item>
                    <title>WordPress to GetSimple to Jekyll</title>
                    <description>&lt;p&gt;... Or: &quot;How I learned to stop worrying and love the command line&quot;.&lt;/p&gt;

&lt;p&gt;I love WordPress. I think it's a really great CMS and the community is huge, to say the least. However, I feel that it's sometimes a bit too much. If I wanted to have a site with a lot of pages and if I was writing several blog posts a day it would been a no-brainer, and I'd choose it in a heartbeat. But since I don't plan to do that I wanted something smaller. I've been playing around with &lt;a href=&quot;http://www.get-simple.info/&quot; title=&quot;GetSimple CMS&quot;&gt;GetSimple&lt;/a&gt; (which is a small but powerful CMS that stores everything in XML files) for a while, so at first I decided to use that. However, it isn't really a blogging plattform so I had to install a  plugin for that. It worked alright, but I still didn't feel quite satisfied. Then I found &lt;a href=&quot;http://www.jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll is described like this in the &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot; title=&quot;Jekyll Wiki on GitHub&quot;&gt;official wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In other words, Jekyll takes your template files (written in HTML and/or &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;Markdown&quot;&gt;Markdown&lt;/a&gt; and marked with &lt;a href=&quot;http://liquidmarkup.org/&quot; title=&quot;Liquid tags&quot;&gt;Liquid tags&lt;/a&gt; and generates them into simple, static .html files. &quot;Blogging Like a Hacker&quot; is sort of Jekyll's tagline, and I think that's a really good description of it. You have to use the command line to generate your static pages and you basically have to write your posts and pages in Markdown or Textile (I don't see that as a bad thing at all though, I love to do it that way). You can also use plugins to extend its' functionality. For example, I use one that enables the pagination pages to be generated into different folders called &lt;code&gt;/blog/page/2/&lt;/code&gt; and so on (rather than &lt;code&gt;/page2/&lt;/code&gt;), and another one to create folders and .html files for my tags (I'll write more about this in another post).&lt;/p&gt;

&lt;h3&gt;Why?&lt;/h3&gt;

&lt;p&gt;It's incredibly lightweight. It doesn't need a database or any back end language like PHP at all, which means that you don't have to worry about the database breaking and you can host it wherever you want to. The file size of a site which consists of just static pages is ridiciously small too (this whole site takes up about 200 kb as of right now) and above all, it's highly customizable. One big thing that actually irks me about WordPress is that it's filled with many pre-named classes and functions that you can't change. Well, you could go into the source and hammer away there, but I'd rather not do that. With Jekyll I can actually change the look of the site in a matter of minutes and I can easily add a new class wherever I want if I need to. It only generates the things that I've added by myself. The only disadvantage is that I need to sit in front of my computer in order for me to use Jekyll. It doesn't really matter to me, since I've never been comfortable with writing and publish post with my phone or via email.&lt;/p&gt;

&lt;p&gt;Like I said in my previous post, it took me some time to actually get it up and running, but now I'm finally happy. It's not the most convenient solution, but it's simple enough for me. I'll probably write a couple of more post about Jekyll, so keep an eye out.&lt;/p&gt;
</description>
                    <published>August 20, 2012</published>
                    <link>http://ellengummesson.com/blog/2012/08/20/wordpress-to-getsimple-to-jekyll</link>
                </item>
            
        </channel>
    </rss>