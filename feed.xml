<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, musings and geekiness</description>
          <link>http://ellengummesson.com/</link>
            
              <item>
                <title>A Brand New Blog</title>
                <description>&lt;p&gt;I’ve yet again redesigned the layout of this site and this time it’s a hell of a lot different. I grew tired of the old look since it in all honestly looked boring and decided to give it some colors. I found the typeface &lt;a href=&quot;http://www.google.com/webfonts/specimen/Roboto&quot; title=&quot;Roboto&quot;&gt;Roboto&lt;/a&gt; a few weeks ago and I like it so much that I decided to use it, which was the first step.&lt;/p&gt;

&lt;h2 id=&quot;hey-what-is-that-theme&quot;&gt;Hey, What Is THAT Theme?&lt;/h2&gt;

&lt;p&gt;The theme is based on &lt;a href=&quot;http://noahfrederick.com/&quot; title=&quot;Noah Fredrick&quot;&gt;Noah Frederick’s&lt;/a&gt; beautiful &lt;a href=&quot;http://noahfrederick.com/blog/2011/lion-terminal-theme-peppermint/&quot; title=&quot;Peppermint terminal thehe&quot;&gt;Peppermint theme&lt;/a&gt; for the OS X’s terminal. I remember stumbling onto his &lt;a href=&quot;http://noahfrederick.com/vim-color-scheme-hemisu/&quot; title=&quot;Hemisu&quot;&gt;Hemisu colorscheme&lt;/a&gt; for &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; and for some reason I also found Peppermint. I even liked it so much that I hacked together a Vim colorscheme for it that I use quite a lot.&lt;/p&gt;

&lt;h2 id=&quot;sass--compass--3&quot;&gt;Sass + Compass = &amp;lt;3&lt;/h2&gt;

&lt;p&gt;I also used &lt;a href=&quot;http://sass-lang.com/&quot; title=&quot;Sass&quot;&gt;Sass&lt;/a&gt; and &lt;a href=&quot;http://compass-style.org/&quot; title=&quot;Compass&quot;&gt;Compass&lt;/a&gt; exclusively for the CSS writing. I’ve been wanting to use it for a long time and I even tried to convert the old design’s CSS to it, but I gave up pretty quickly. This time I didn’t and I of course used &lt;a href=&quot;https://github.com/gummesson/smallwork&quot; title=&quot;Smallwork&quot;&gt;Smallwork&lt;/a&gt; as a base which made the process a lot more easier and faster. Redesigning this site was also one of the things that made me re-write Smallwork.&lt;/p&gt;

&lt;p&gt;using Compass with Jekyll is also relatively easy by the way. I first tried out a couple of plugins, but I decided to implement it in my Rake task instead. While the plugins worked great it really bugged me that I couldn’t decide when to use &lt;code&gt;compass compile&lt;/code&gt; and when to use &lt;code&gt;compass watch&lt;/code&gt;. All I had to do was to add this to my &lt;code&gt;build&lt;/code&gt; task in my &lt;code&gt;Rakefile&lt;/code&gt;, before &lt;code&gt;jekyll&lt;/code&gt; is run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;system &quot;cd assets/ &amp;amp;&amp;amp; compass compile &amp;amp;&amp;amp; cd ../&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple and effective!&lt;/p&gt;

&lt;h2 id=&quot;funish-trivia&quot;&gt;Fun(ish) Trivia&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I started the redesign on March 1st and I’ve made a total of 28 commits&lt;sup id=&quot;fnref:20130309-1&quot;&gt;&lt;a href=&quot;#fn:20130309-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; to the git repository I used for the development.&lt;/li&gt;
  &lt;li&gt;I “skipped” support for Internet Explorer 8 in favor of using &lt;code&gt;[class^=&quot;column-&quot;]:last-child&lt;/code&gt; to remove the &lt;code&gt;margin-right&lt;/code&gt; on the grid system&lt;sup id=&quot;fnref:20130309-2&quot;&gt;&lt;a href=&quot;#fn:20130309-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;I also found a pretty cool Sass function called &lt;code&gt;darken()&lt;/code&gt;, which made it easy finding a good background color for my &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;pre&lt;/code&gt; tags and the subtle text shadow. All of the color functions for Sass are pretty cool, in fact.&lt;/li&gt;
  &lt;li&gt;The pink line at the bottom of the site uses the &lt;a href=&quot;http://mystrd.at/modern-clean-css-sticky-footer/&quot; title=&quot;Modern Clean CSS Sticky Footer&quot;&gt;“James Dean Sticky Footer”&lt;/a&gt; approach, which is a nice little hack. I love the name too!&lt;/li&gt;
  &lt;li&gt;I tried to change as little as possible when I did the CSS for the media queries. I pratically just changed the font size and some margins. That’s it.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130309-1&quot;&gt;
      &lt;p&gt;I’m an obsessive commiter.&lt;a href=&quot;#fnref:20130309-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130309-2&quot;&gt;
      &lt;p&gt;I doubt that that will cause any problems. I don’t think I know anyone that actually use Internet Explorer.&lt;a href=&quot;#fnref:20130309-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>March  9, 2013</published>
                <link>http://ellengummesson.com/blog/2013/03/09/a-brand-new-blog</link>
              </item>
            
              <item>
                <title>Re-releasing Smallwork</title>
                <description>&lt;p&gt;Back in January I wrote a small paragraph about my SCSS “framework” &lt;a href=&quot;https://github.com/gummesson/smallwork&quot; title=&quot;Smallwork&quot;&gt;Smallwork&lt;/a&gt;. When I released it I was really happy about it, but I soon realized that I’d been perhaps a bit too trigger happy with it. This weekend I decided on a whim to nuke it and start over and yesterday I re-released it. It’s pratically re-written from the ground up and it’s even smaller in size than it was before. I cleaned up the code like a maid and threw out quite a bit of extra “baggage” that I was probably never going to use anyway. Now I feel like it actually could be useful to someone else too, which is really nice.&lt;/p&gt;

&lt;p&gt;I also created yet another &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;Vim&quot;&gt;Vim&lt;/a&gt; plugin, this time just a simple wrapper for &lt;a href=&quot;http://compass-style.org/&quot; title=&quot;Compass&quot;&gt;Compass&lt;/a&gt;, which &lt;em&gt;Smallwork&lt;/em&gt; is built with. I was getting sick of having to type either &lt;code&gt;:!compass compile&lt;/code&gt; or &lt;code&gt;:sh&lt;/code&gt; and then &lt;code&gt;compass compile&lt;/code&gt; so I threw together a really basic function that makes it much easier. Now I only have to type &lt;code&gt;:CompassCompile&lt;/code&gt;. Another nice feature is that you don’t actually have to close the command prompt&lt;sup id=&quot;fnref:20130305-1&quot;&gt;&lt;a href=&quot;#fn:20130305-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; which means that you can use &lt;code&gt;:CompassWatch&lt;/code&gt; without it interfering with Vim&lt;sup id=&quot;fnref:20130305-2&quot;&gt;&lt;a href=&quot;#fn:20130305-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. If all goes well I think I’ll even publish it on the official Vim scripts website too.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130305-1&quot;&gt;
      &lt;p&gt;Normally you can’t do anything until you’ve exited the command prompt and hit &lt;code&gt;Enter&lt;/code&gt;, but a simple solution from the &lt;a href=&quot;http://vim.wikia.com/wiki/Execute_external_programs_asynchronously_under_Windows&quot; title=&quot;Execute external programs asynchronously under Windows&quot;&gt;Vim Wiki&lt;/a&gt; fixed that.&lt;a href=&quot;#fnref:20130305-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130305-2&quot;&gt;
      &lt;p&gt;Atleast on Windows. I don’t think that there’s an easy way to do that on Unix, which is unfortunate.&lt;a href=&quot;#fnref:20130305-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>March  5, 2013</published>
                <link>http://ellengummesson.com/blog/2013/03/05/re-releasing-smallwork</link>
              </item>
            
              <item>
                <title>Fixing Jekyll's Encoding Shenanings</title>
                <description>&lt;p&gt;After installing the 0.12.1 version of &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt; I started to get an annoying error that the encoding was wrong. I’m really picky about saving all my files as &lt;code&gt;UTF-8&lt;/code&gt;, so I couldn’t for the life of me figuring out why it all of a sudden threw that kind of error. I even reinstalled 0.12.0 and sure enough, that version worked without a problem. The solution is to set the default language and encoding before running Jekyll, ie. &lt;code&gt;set LANG=en_EN.UTF-8&lt;/code&gt; for Windows or &lt;code&gt;export LANG=en_EN.UTF-8&lt;/code&gt;&lt;sup id=&quot;fnref:20130303-1&quot;&gt;&lt;a href=&quot;#fn:20130303-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; for Unix. Since I’m a lazy person I of course implemented it in my &lt;code&gt;Rakefile&lt;/code&gt;, similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'rbconfig'

LANG = en_EN.UTF-8

if RbConfig::CONFIG[&quot;host_os&quot;] =~ /mswin|mingw/
  SET = &quot;set&quot;
else
  SET = &quot;export&quot;
end

task :build do
  system &quot;#{SET} LANG=#{LANG} &amp;amp;&amp;amp; jekyll&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RbConfig&lt;/code&gt; part is actually a neat trick I found a couple of weeks ago. It apparently works better than using &lt;code&gt;RUBY_PLATFORM&lt;/code&gt; since it picks up the actual OS rather than the Ruby platform.&lt;sup id=&quot;fnref:20130303-2&quot;&gt;&lt;a href=&quot;#fn:20130303-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; I’m not sure that the &lt;code&gt;require&lt;/code&gt; part is really necessary but it doesn’t hurt either. You can of course just create an alias too if you’re only using Unix, ie: &lt;code&gt;alias jekyll=&quot;export LANG=en_EN.UTF-8 &amp;amp;&amp;amp; jekyll&quot;&lt;/code&gt; or something like that.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130303-1&quot;&gt;
      &lt;p&gt;I actually set my language to &lt;code&gt;sv_SV.UTF-8&lt;/code&gt;, but I figured that using the english version in an example is better.&lt;a href=&quot;#fnref:20130303-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130303-2&quot;&gt;
      &lt;p&gt;Using &lt;code&gt;RUBY_PLATFORM&lt;/code&gt; when you’re working with other Ruby implementations such as JRuby doesn’t quite work, if I understand it correctly.&lt;a href=&quot;#fnref:20130303-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>March  3, 2013</published>
                <link>http://ellengummesson.com/blog/2013/03/03/fixing-jekylls-encoding-shenanings</link>
              </item>
            
              <item>
                <title>WEBrick And Cygwin</title>
                <description>&lt;p&gt;There’s no secret that I’ve become a big fan of &lt;a href=&quot;http://www.cygwin.com/&quot; title=&quot;Cygwin&quot;&gt;Cygwin&lt;/a&gt; and the Unix command line since I started to use it more frequently. However, there’s really no easy way of running &lt;a href=&quot;http://www.ruby-lang.org/en/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt;, or more specifically &lt;a href=&quot;http://rubygems.org/&quot; title=&quot;RubyGems&quot;&gt;RubyGems&lt;/a&gt; under it unless you’ve installed it directly throught the Cygwin installer which I, unfortunately, haven’t done. I did find the alias solution which I wrote about in the previous post that makes it somewhat less of a hassle. Using it in conjunction with &lt;a href=&quot;http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick.html&quot; title=&quot;Webbrick&quot;&gt;WEBrick&lt;/a&gt;&lt;sup id=&quot;fnref:20130228-1&quot;&gt;&lt;a href=&quot;#fn:20130228-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a pain though, since it for some reason won’t kill the server and thus rendering the port useless until the computer gets rebooted. After much, much digging I did found an answer to how to shut it down “properly”: &lt;code&gt;taskkill /F /PID {num}&lt;/code&gt;&lt;sup id=&quot;fnref:20130228-2&quot;&gt;&lt;a href=&quot;#fn:20130228-2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. The &lt;code&gt;{num}&lt;/code&gt; is of course replaced with the real PID number that Webbrick outputs when it starts. It’s kind of brutal and annoying, but I think it’s good to have a backup plan in case I do want to execute Jekyll from Cygwin. I did give it an alias too, just to be sure.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130228-1&quot;&gt;
      &lt;p&gt;Which is the default server for &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;http://www.sinatrarb.com/&quot; title=&quot;Sinatra&quot;&gt;Sinatra&lt;/a&gt;.&lt;a href=&quot;#fnref:20130228-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:20130228-2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14244288/how-do-i-kill-a-rails-webrick-server?rq=1&quot; title=&quot;How do I killa a Rails Webbrick server?&quot;&gt;The answer was found on StackOverflow&lt;/a&gt;, as expected.&lt;a href=&quot;#fnref:20130228-2&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>February 28, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/28/webrick-and-cygwin</link>
              </item>
            
              <item>
                <title>Ack On Windows</title>
                <description>&lt;p&gt;I recently finally tried out &lt;a href=&quot;http://betterthangrep.com/&quot; title=&quot;Ack&quot;&gt;Ack&lt;/a&gt; which I must say is a pretty awesome tool. The installation was fairly straight forward but I though that I would write it down here in case I’ll ever need to do it again or if someone wants a small guide with just a few easy steps.&lt;/p&gt;

&lt;p&gt;First things first, &lt;a href=&quot;http://www.perl.org/&quot; title=&quot;Perl&quot;&gt;Perl&lt;/a&gt; needs to be install on the system. If you have either &lt;a href=&quot;http://git-scm.com/&quot; title=&quot;Git&quot;&gt;Git&lt;/a&gt; or &lt;a href=&quot;http://rubyinstaller.org/add-ons/devkit/&quot; title=&quot;DevKit&quot;&gt;DevKit&lt;/a&gt; installed then you’re good to go.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the standalone script from the &lt;a href=&quot;http://betterthangrep.com/install/&quot; title=&quot;How to install ack&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Create a &lt;code&gt;bat&lt;/code&gt; file and add the following to it: &lt;code&gt;@&quot;C:\path\to\perl.exe&quot; C:\path\to\ack.pl %*&lt;/code&gt;. Change the paths so that they point to the relevant places.&lt;/li&gt;
  &lt;li&gt;Save the file as &lt;code&gt;ack.bat&lt;/code&gt; and place it somewhere in your system environment path, or create a new folder and add it to said path.&lt;sup id=&quot;fnref:20130221-1&quot;&gt;&lt;a href=&quot;#fn:20130221-1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Last, but not least, create an alias for the &lt;code&gt;bat&lt;/code&gt; file in your &lt;code&gt;.bash_profile&lt;/code&gt; if you want to get it to work with &lt;a href=&quot;http://www.cygwin.com/&quot; title=&quot;Cygwin&quot;&gt;Cygwin&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use the same steps to create a more “sophisticated” way of running any kind of script too. Let’s say you have a script called &lt;code&gt;foo.rb&lt;/code&gt;. You want to run it straight from the command line but you don’t necessary want to turn into a full fledged gem. Just change the the first path in the &lt;code&gt;bat&lt;/code&gt; file so it points to your binary &lt;a href=&quot;http://www.ruby-lang.org/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt; file and the second to your actually script and you’re all good!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:20130221-1&quot;&gt;
      &lt;p&gt;Which can be modified under “System Properties” → “Advanced system settings” → “Advanced” → “Environment Variables” → “Path”.&lt;a href=&quot;#fnref:20130221-1&quot; rel=&quot;reference&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>February 21, 2013</published>
                <link>http://ellengummesson.com/blog/2013/02/21/ack-on-windows</link>
              </item>
            
    </channel>
  </rss>
