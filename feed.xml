<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Ellen Gummesson</title>
        <description>Random ramblings, musings and geekiness</description>
          <link>http://ellengummesson.com</link>
            
              <item>
                <title>Getting started with gulp</title>
                <description>&lt;p&gt;During the last couple of weeks there’s been a lot of buzz around &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt;, which is a build system similar to &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; but with a different approach. gulp’s main feature is that it’s using &lt;a href=&quot;http://nodejs.org/api/stream.html&quot;&gt;streams&lt;/a&gt; and piping for all of the processing.&lt;/p&gt;

&lt;p&gt;I won’t dwell into how streams work, but if you want to learn more about streams in Node.js work I encourage you to read the “&lt;a href=&quot;https://github.com/substack/stream-handbook&quot;&gt;Stream handbook&lt;/a&gt;”. If you want to learn more about standard streams, try “&lt;a href=&quot;http://gigaom.com/2009/07/01/dig-into-unix-standard-streams/&quot;&gt;Dig Into Unix: Standard Streams&lt;/a&gt;”.&lt;/p&gt;

&lt;h2 id=&quot;meet-gulp&quot;&gt;Meet gulp&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt; is at its core very simple and consists of just a few functions: &lt;code&gt;task&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;dest&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt;. This guide will focus on the first five of those. Take a look at the &lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/README.md#gulp-api&quot;&gt;gulp API documentation&lt;/a&gt; if you want more information on each individual function.&lt;/p&gt;

&lt;p&gt;To define a build task you use &lt;code&gt;gulp.task()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('default', function() {
  // ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To read your source files you use &lt;code&gt;gulp.src()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.src('src/app.js')
  .pipe(/* ... */);

gulp.src('src/*.js')
  .pipe(/* ... */);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To write your files you use &lt;code&gt;gulp.dest()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.pipe(gulp.dest('dest/app.js'));

.pipe(gulp.dest('dest/'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run different tasks from inside another task you use &lt;code&gt;gulp.run()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.run('task', 'another-task');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To watch your files for changes you use &lt;code&gt;gulp.watch()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.watch('src/*.js', function() {
  // ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;To use &lt;code&gt;gulp&lt;/code&gt; we first need to install it globally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install gulp -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll then add it as a dependency in our project’s &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install gulp --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we’re going to lint and test our code we’ll also install &lt;code&gt;gulp-jshint&lt;/code&gt; and &lt;code&gt;gulp-mocha&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install gulp-jshint --save-dev
npm install gulp-mocha --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s create a file called &lt;code&gt;add.js&lt;/code&gt; and save it in the a folder called &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(x, y) {
  return x + y;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll also need some tests. Create a file called &lt;code&gt;add.test.js&lt;/code&gt; in a folder called &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var assert = require('assert');
var add    = require('../src/add.js');

describe('add()', function() {
  it('should return 2 when you pass it 1, 1', function() {
    assert.equal(add(1, 1), 2);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we’ll create a file called &lt;code&gt;gulpfile.js&lt;/code&gt; at the root of our project and require our dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp   = require('gulp');
var jshint = require('gulp-jshint');
var mocha  = require('gulp-mocha');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we’ll add our &lt;code&gt;lint&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('lint', function() {
  return gulp
    .src(['gulpfile.js', 'src/*.js', 'test/*.js'])
    .pipe(jshint())
    .pipe(jshint.reporter('default'));
});

gulp.task('test', function() {
  return gulp
    .src('test/*.js')
    .pipe(mocha());
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason we use &lt;code&gt;return&lt;/code&gt; in our tasks is to make sure that the task finishes completely before the next one gets executed.&lt;/p&gt;

&lt;p&gt;Lastly we’ll create our &lt;code&gt;default&lt;/code&gt; task. We’ll first add our &lt;code&gt;lint&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; tasks as dependencies (since we also want to run them before the &lt;code&gt;default&lt;/code&gt; task starts) and then use both &lt;code&gt;gulp.run()&lt;/code&gt; and &lt;code&gt;gulp.watch()&lt;/code&gt; for running them automatically whenever we update a file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task('default', ['lint', 'test'], function() {
  gulp.watch(['src/*.js', 'test/*.js'], function() {
    gulp.run('lint', 'test');
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how our &lt;code&gt;gulpfile.js&lt;/code&gt; looks now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gulp   = require('gulp');
var jshint = require('gulp-jshint');
var mocha  = require('gulp-mocha');

gulp.task('lint', function() {
  return gulp
    .src(['gulpfile.js', 'src/*.js', 'test/*.js'])
    .pipe(jshint())
    .pipe(jshint.reporter('default'));
});

gulp.task('test', function() {
  return gulp
    .src('test/*.js')
    .pipe(mocha());
});

gulp.task('default', ['lint', 'test'], function() {
  gulp.watch(['src/*.js', 'test/*.js'], function() {
    gulp.run('lint', 'test');
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, open up a terminal and run &lt;code&gt;gulp&lt;/code&gt;. The output should look similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[gulp] Using file &amp;lt;PATH&amp;gt;/gulpfile.js
[gulp] Working directory changed to &amp;lt;PATH&amp;gt;
[gulp] Running 'lint'...
[gulp] Running 'test'...
[gulp] Finished 'lint' in 31 ms

  .

  1 passing (2ms)

[gulp] Finished 'test' in 30 ms
[gulp] Running 'default'...
[gulp] Finished 'default' in 5.99 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it. Until you stop the &lt;code&gt;default&lt;/code&gt; task both the &lt;code&gt;lint&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; tasks will run whenever you modify a file in the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; folders.&lt;/p&gt;

&lt;h2 id=&quot;why-use-gulp&quot;&gt;Why use gulp?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://slid.es/contra/gulp&quot;&gt;gulp’s introduction slides&lt;/a&gt; brings up a couple of valid reasons for using it in favor of other build systems. You’re writing actual code where you can use Node.js’ standard library in a simple way. All plugins should focus on doing one thing and one thing only, as stated in the guidelines on “&lt;a href=&quot;https://github.com/gulpjs/gulp/wiki/Writing-a-gulp-plugin&quot;&gt;writing a gulp plugin&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;In the end, like always, it’s just a matter of preference.&lt;/p&gt;
</description>
                <published>January  6, 2014</published>
                <link>http://ellengummesson.com/blog/2014/01/06/getting-started-with-gulp</link>
              </item>
            
              <item>
                <title>Swapping Pathogen for Vundle</title>
                <description>&lt;p&gt;After reading the above post yesterday I finally took the plunge and switched to &lt;a href=&quot;https://github.com/gmarik/vundle&quot;&gt;Vundle&lt;/a&gt; from &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;. I already love it. Removing Git submodules is still a bit of a pain though so I used &lt;a href=&quot;https://gist.github.com/sharplet/6289697&quot;&gt;this script by Adam Sharp&lt;/a&gt;, which made it a lot easier. Now I’m off to trying out about a million different plugins!&lt;/p&gt;
</description>
                <published>December 29, 2013</published>
                <link>http://ellengummesson.com/blog/2013/12/29/swapping-pathogen-for-vundle</link>
              </item>
            
              <item>
                <title>Cliche.js</title>
                <description>&lt;p&gt;For the first time in a couple of weeks I’m releasing a new thing: &lt;a href=&quot;https://github.com/gummesson/cliche.js&quot;&gt;Cliche.js&lt;/a&gt;. It’s a small library for mapping JavaScript click events. Instead of having to use &lt;code&gt;document.querySelector&lt;/code&gt; and &lt;code&gt;target.addEventListener&lt;/code&gt; over and over again&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; you can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var someFunction = function(selector) {
  // ...  
};

var anotherFunction = function(selector, event) {
  var target = event.target;
  // ...  
};

Cliche({
  '#some-selector'    : someFunction,
  '#another-selector' : anotherFunction
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it looks pretty neat. For simplicity it currently only supports IE9+, but you can easily use a couple of polyfills to get it to work in other browsers.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Although if you’re mapping a lot of events you probably should be using &lt;code&gt;event.target&lt;/code&gt; with a few selected event listeners instead.&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <published>December 23, 2013</published>
                <link>http://ellengummesson.com/blog/2013/12/23/cliche-js</link>
              </item>
            
              <item>
                <title>Scott Hanselman's 2014 Ultimate Developer and Power Users Tool List for Windows</title>
                <description>&lt;p&gt;An extensive list filled with goodies. I especially enjoyed discovering &lt;a href=&quot;https://github.com/bmatzelle/gow&quot;&gt;Gow&lt;/a&gt;, which is a lightweight alternative to &lt;a href=&quot;http://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;. The Bash “implementation” works like a charm and is suprisingly fast!&lt;/p&gt;
</description>
                <published>December 22, 2013</published>
                <link>http://ellengummesson.com/blog/2013/12/22/scott-hanselmans-2014-ultimate-developer-and-power-users-tool-list-for-windows</link>
              </item>
            
              <item>
                <title>should.lua: bringing BDD-style assertions to Lua</title>
                <description>&lt;p&gt;After having released three smaller libraries for Lua I embarked on a pretty ambitious journey: to create a BDD-style assertion library, which I then named &lt;a href=&quot;https://github.com/gummesson/should.lua&quot;&gt;should.lua&lt;/a&gt;. &lt;a href=&quot;http://olivinelabs.com/busted/&quot;&gt;Busted&lt;/a&gt; has been my testing framework of choice and I’m a big fan of it, but I don’t really like using &lt;code&gt;assert&lt;/code&gt; when I use &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; in my tests. Now I can write my tests like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('A test', function()
  it('should do something', function()
    should.Equal(true, true)
  end)
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;expect&lt;/code&gt; is also available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe('A test', function()
  it('should do something', function()
    expect(true):toEqual(true)
  end)
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;expect&lt;/code&gt; is actually just a thin “wrapper” for the &lt;code&gt;should&lt;/code&gt; library, which I hacked together using the recommended way for creating &lt;a href=&quot;http://www.lua.org/pil/16.1.html&quot;&gt;classes&lt;/a&gt; in Lua. It was a challenge, but a pretty fun one. However, it’s far from finished so pull requests are always welcome!&lt;/p&gt;
</description>
                <published>November 11, 2013</published>
                <link>http://ellengummesson.com/blog/2013/11/11/should-lua-bringing-bdd-style-assertions-to-lua</link>
              </item>
            
    </channel>
  </rss>
