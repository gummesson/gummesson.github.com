function anchorScrolling(){"use strict";var t=750;$("a[rel]").click(function(){var i=$(this).attr("href"),o=$(i.replace(":","\\:")),n=o.offset().top;return scrollAnimation(n,t),!1})}function postRandomizer(){"use strict";var t=$(".post-link[href]"),i=t.length,o=t[Math.floor(Math.random()*i)];$("#random-post").attr("href",o)}function getGithubRepositories(t){"use strict";var i=$("#repo-list");i.append("<li>Loading...</li>");var o=function(t,i){$.getJSON("https://api.github.com/users/"+t+"/repos?callback=?",i)};o(t,function(t){var o=$("#github-repos").html(),n=Mustache.render(o,t);i.html(n)})}function scrollAnimation(t,i){"use strict";$("html, body").animate({scrollTop:t},i)}function vimKeyBindings(){"use strict";var t=$("html, body");if(t.hasClass("js-vim")){var i=50,o=25;t.keydown(function(t){if(t.shiftKey===!0&&(187===t.which||171===t.which||191==t.which)){var i="/experiments/vim";window.location=i}75===t.which&&n("up"),74===t.which&&n("down"),71===t.which&&(t.shiftKey===!0?n("bottom"):n("top")),77===t.which&&n("middle")});var n=function(t){var n,r=$(window).scrollTop(),e=$(document).height(),s=$(window).height();"up"===t&&(n=r-i),"down"===t&&(n=r+i),"top"===t&&(n=0),"bottom"===t&&(n=e),"middle"===t&&(n=e/2-s/2),scrollAnimation(n,o)}}}$(document).ready(function(){"use strict";anchorScrolling(),postRandomizer(),vimKeyBindings(),getGithubRepositories("gummesson")});